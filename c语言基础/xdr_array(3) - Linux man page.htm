<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<title>xdr_array(3) - Linux man page</title>
<base href="http://linux.die.net/man/3/xdr_array">
<link rel="canonical" href="http://linux.die.net/man/3/xdr_array">
<link rel="stylesheet" type="text/css" href="/style/white.css">
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
<meta name="viewport" content="width=800,maximum-scale=1.0">
<script type="text/javascript">
<!--
var _gaq = _gaq || [];_gaq.push(['_setAccount', 'UA-50820-6']);_gaq.push(['_trackPageview']);
window.google_analytics_uacct = 'UA-50820-6';
// -->
</script>
</head>

<body bgcolor="#ffffff" text="#333333" link="#660000" vlink="#660000" alink="#000000">
<div id=bg><div id=content>

<!-- google_ad_section_start -->
<h1>xdr_array(3) - Linux man page</h1>

<h2>Name</h2>

<p>xdr - library routines for external data representation
<h2>Synopsis And Description</h2>

<p>These routines allow C programmers to describe arbitrary data structures in a machine-independent fashion. Data for remote procedure calls are transmitted
using these routines.
<p>The prototypes below are declared in <i>&lt;<a href="/include/rpc/xdr.h" rel="nofollow">rpc/xdr.h</a>&gt;</i> and make use of the following types:
<dl compact>
<dd>

<pre class="code">typedef int <i>bool_t</i>;

typedef bool_t (*<i>xdrproc_t</i>) (XDR *, void *,...);</pre>
<dt>For the declaration of the <i>XDR</i> type, see <i>&lt;<a href="/include/rpc/xdr.h" rel="nofollow">rpc/xdr.h</a>&gt;</i>.
<pre class="code"><b>bool_t xdr_array(XDR *</b><i>xdrs</i><b>, char **</b><i>arrp</i><b>, unsigned int *</b><i>sizep</i><b>,
                 unsigned int</b> <i>maxsize</i><b>, unsigned int</b> <i>elsize</i><b>,
                 xdrproc_t</b> <i>elproc</i><b>);
</b></pre>
<dd>A filter primitive that translates between variable-length arrays and their corresponding external representations. The argument <i>arrp</i> is the address
of the pointer to the array, while <i>sizep</i> is the address of the element count of the array; this element count cannot exceed <i>maxsize</i>. The argument
<i>elsize</i> is the <i>sizeof</i> each of the array's elements, and <i>elproc</i> is an XDR filter that translates between the array elements' C form, and
their external representation. This routine returns one if it succeeds, zero otherwise.
<dt>

<pre class="code"><b>bool_t xdr_bool(XDR *</b><i>xdrs</i><b>, bool_t *</b><i>bp</i><b>);
</b></pre>
<dd>A filter primitive that translates between booleans (C integers) and their external representations. When encoding data, this filter produces values of
either one or zero. This routine returns one if it succeeds, zero otherwise.
<dt>

<pre class="code"><b>bool_t xdr_bytes(XDR *</b><i>xdrs</i><b>, char **</b><i>sp</i><b>, unsigned int *</b><i>sizep</i><b>,
                 unsigned int</b> <i>maxsize</i><b>);
</b></pre>
<dd>A filter primitive that translates between counted byte strings and their external representations. The argument <i>sp</i> is the address of the string
pointer. The length of the string is located at address <i>sizep</i>; strings cannot be longer than <i>maxsize</i>. This routine returns one if it succeeds,
zero otherwise.
<dt>

<pre class="code"><b>bool_t xdr_char(XDR *</b><i>xdrs</i><b>, char *</b><i>cp</i><b>);
</b></pre>
<dd>A filter primitive that translates between C characters and their external representations. This routine returns one if it succeeds, zero otherwise. Note:
encoded characters are not packed, and occupy 4 bytes each. For arrays of characters, it is worthwhile to consider <b>xdr_bytes</b>(), <b>xdr_opaque</b>() or
<b>xdr_string</b>().
<dt>

<pre class="code"><b>void xdr_destroy(XDR *</b><i>xdrs</i><b>);
</b></pre>
<dd>A macro that invokes the destroy routine associated with the XDR stream, <i>xdrs</i>. Destruction usually involves freeing private data structures
associated with the stream. Using <i>xdrs</i> after invoking <b>xdr_destroy</b>() is undefined.
<dt>

<pre class="code"><b>bool_t xdr_double(XDR *</b><i>xdrs</i><b>, double *</b><i>dp</i><b>);
</b></pre>
<dd>A filter primitive that translates between C <i>double</i> precision numbers and their external representations. This routine returns one if it succeeds,
zero otherwise.
<dt>

<pre class="code"><b>bool_t xdr_enum(XDR *</b><i>xdrs</i><b>, enum_t *</b><i>ep</i><b>);
</b></pre>
<dd>A filter primitive that translates between C <i>enum</i>s (actually integers) and their external representations. This routine returns one if it succeeds,
zero otherwise.
<dt>

<pre class="code"><b>bool_t xdr_float(XDR *</b><i>xdrs</i><b>, float *</b><i>fp</i><b>);
</b></pre>
<dd>A filter primitive that translates between C <i>float</i>s and their external representations. This routine returns one if it succeeds, zero
otherwise.
<dt>

<pre class="code"><b>void xdr_free(xdrproc_t</b> <i>proc</i><b>, char *</b><i>objp</i><b>);
</b></pre>
<dd>Generic freeing routine. The first argument is the XDR routine for the object being freed. The second argument is a pointer to the object itself. Note: the
pointer passed to this routine is <i>not</i> freed, but what it points to <i>is</i> freed (recursively).
<dt>

<pre class="code"><b>unsigned int xdr_getpos(XDR *</b><i>xdrs</i><b>);
</b></pre>
<dd>A macro that invokes the get-position routine associated with the XDR stream, <i>xdrs</i>. The routine returns an unsigned integer, which indicates the
position of the XDR byte stream. A desirable feature of XDR streams is that simple arithmetic works with this number, although the XDR stream instances need
not guarantee this.
<dt>

<pre class="code"><b>long *xdr_inline(XDR *</b><i>xdrs</i><b>, int</b> <i>len</i><b>);
</b></pre>
<dd>A macro that invokes the inline routine associated with the XDR stream, <i>xdrs</i>. The routine returns a pointer to a contiguous piece of the stream's
buffer; <i>len</i> is the byte length of the desired buffer. Note: pointer is cast to <i>long *</i>.
<p>Warning: <b>xdr_inline</b>() may return NULL (0) if it cannot allocate a contiguous piece of a buffer. Therefore the behavior may vary among stream
instances; it exists for the sake of efficiency.
<dt>

<pre class="code"><b>bool_t xdr_int(XDR *</b><i>xdrs</i><b>, int *</b><i>ip</i><b>);
</b></pre>
<dd>A filter primitive that translates between C integers and their external representations. This routine returns one if it succeeds, zero otherwise.
<dt>

<pre class="code"><b>bool_t xdr_long(XDR *</b><i>xdrs</i><b>, long *</b><i>lp</i><b>);
</b></pre>
<dd>A filter primitive that translates between C <i>long</i> integers and their external representations. This routine returns one if it succeeds, zero
otherwise.
<dt>

<pre class="code"><b>void xdrmem_create(XDR *</b><i>xdrs</i><b>, char *</b><i>addr</i><b>, unsigned int</b> <i>size</i><b>,
                   enum xdr_op</b> <i>op</i><b>);
</b></pre>
<dd>This routine initializes the XDR stream object pointed to by <i>xdrs</i>. The stream's data is written to, or read from, a chunk of memory at location
<i>addr</i> whose length is no more than <i>size</i> bytes long. The <i>op</i> determines the direction of the XDR stream (either <b>XDR_ENCODE</b>,
<b>XDR_DECODE</b>, or <b>XDR_FREE</b>).
<dt>

<pre class="code"><b>bool_t xdr_opaque(XDR *</b><i>xdrs</i><b>, char *</b><i>cp</i><b>, unsigned int</b> <i>cnt</i><b>);
</b></pre>
<dd>A filter primitive that translates between fixed size opaque data and its external representation. The argument <i>cp</i> is the address of the opaque
object, and <i>cnt</i> is its size in bytes. This routine returns one if it succeeds, zero otherwise.
<dt>

<pre class="code"><b>bool_t xdr_pointer(XDR *</b><i>xdrs</i><b>, char **</b><i>objpp</i><b>,
                   unsigned int</b> <i>objsize</i><b>, xdrproc_t</b> <i>xdrobj</i><b>);
</b></pre>
<dd>Like <b>xdr_reference</b>() except that it serializes NULL pointers, whereas <b>xdr_reference</b>() does not. Thus, <b>xdr_pointer</b>() can represent
recursive data structures, such as binary trees or linked lists.
<dt>

<pre class="code"><b>void xdrrec_create(XDR *</b><i>xdrs</i><b>, unsigned int</b> <i>sendsize</i><b>,
                   unsigned int</b> <i>recvsize</i><b>, char *</b><i>handle</i><b>,
                   int (*</b><i>readit</i><b>) (char *, char *, int),
                   int (*</b><i>writeit</i><b>) (char *, char *, int));
</b></pre>
<dd>This routine initializes the XDR stream object pointed to by <i>xdrs</i>. The stream's data is written to a buffer of size <i>sendsize</i>; a value of zero
indicates the system should use a suitable default. The stream's data is read from a buffer of size <i>recvsize</i>; it too can be set to a suitable default by
passing a zero value. When a stream's output buffer is full, <i>writeit</i> is called. Similarly, when a stream's input buffer is empty, <i>readit</i> is
called. The behavior of these two routines is similar to the system calls <b><a href="/man/2/read">read</a></b>(2) and <b><a href="/man/2/write">write</a></b>(2), except that <i>handle</i> is passed to the former
routines as the first argument. Note: the XDR stream's <i>op</i> field must be set by the caller.
<p>Warning: this XDR stream implements an intermediate record stream. Therefore there are additional bytes in the stream to provide record boundary
information.
<dt>

<pre class="code"><b>bool_t xdrrec_endofrecord(XDR *</b><i>xdrs</i><b>, int</b> <i>sendnow</i><b>);
</b></pre>
<dd>This routine can be invoked only on streams created by <b>xdrrec_create</b>(). The data in the output buffer is marked as a completed record, and the output
buffer is optionally written out if <i>sendnow</i> is nonzero. This routine returns one if it succeeds, zero otherwise.
<dt>

<pre class="code"><b>bool_t xdrrec_eof(XDR *</b><i>xdrs</i><b>);
</b></pre>
<dd>This routine can be invoked only on streams created by <b>xdrrec_create</b>(). After consuming the rest of the current record in the stream, this routine
returns one if the stream has no more input, zero otherwise.
<dt>

<pre class="code"><b>bool_t xdrrec_skiprecord(XDR *</b><i>xdrs</i><b>);
</b></pre>
<dd>This routine can be invoked only on streams created by <b>xdrrec_create</b>(). It tells the XDR implementation that the rest of the current record in the
stream's input buffer should be discarded. This routine returns one if it succeeds, zero otherwise.
<dt>

<pre class="code"><b>bool_t xdr_reference(XDR *</b><i>xdrs</i><b>, char **</b><i>pp</i><b>, unsigned int</b> <i>size</i><b>,
                     xdrproc_t</b> <i>proc</i><b>);
</b></pre>
<dd>A primitive that provides pointer chasing within structures. The argument <i>pp</i> is the address of the pointer; <i>size</i> is the <i>sizeof</i> the
structure that <i>*pp</i> points to; and <i>proc</i> is an XDR procedure that filters the structure between its C form and its external representation. This
routine returns one if it succeeds, zero otherwise.
<p>Warning: this routine does not understand NULL pointers. Use <b>xdr_pointer</b>() instead.
<dt>

<pre class="code"><b>xdr_setpos(XDR *</b><i>xdrs</i><b>, unsigned int</b> <i>pos</i><b>);
</b></pre>
<dd>A macro that invokes the set position routine associated with the XDR stream <i>xdrs</i>. The argument <i>pos</i> is a position value obtained from
<b>xdr_getpos</b>(). This routine returns one if the XDR stream could be repositioned, and zero otherwise.
<p>Warning: it is difficult to reposition some types of XDR streams, so this routine may fail with one type of stream and succeed with another.
<dt>

<pre class="code"><b>bool_t xdr_short(XDR *</b><i>xdrs</i><b>, short *</b><i>sp</i><b>);
</b></pre>
<dd>A filter primitive that translates between C <i>short</i> integers and their external representations. This routine returns one if it succeeds, zero
otherwise.
<dt>

<pre class="code"><b>void xdrstdio_create(XDR *</b><i>xdrs</i><b>, FILE *</b><i>file</i><b>, enum xdr_op</b> <i>op</i><b>);
</b></pre>
<dd>This routine initializes the XDR stream object pointed to by <i>xdrs</i>. The XDR stream data is written to, or read from, the <i>stdio</i> stream
<i>file</i>. The argument <i>op</i> determines the direction of the XDR stream (either <b>XDR_ENCODE</b>, <b>XDR_DECODE</b>, or <b>XDR_FREE</b>).

<p>Warning: the destroy routine associated with such XDR streams calls <b><a href="fflush">fflush</a></b>(3) on the <i>file</i> stream, but never <b><a href="fclose">fclose</a></b>(3).
<dt>

<pre class="code"><b>bool_t xdr_string(XDR *</b><i>xdrs</i><b>, char **</b><i>sp</i><b>, unsigned int</b> <i>maxsize</i><b>);
</b></pre>
<dd>A filter primitive that translates between C strings and their corresponding external representations. Strings cannot be longer than <i>maxsize</i>. Note:
<i>sp</i> is the address of the string's pointer. This routine returns one if it succeeds, zero otherwise.
<dt>

<pre class="code"><b>bool_t xdr_u_char(XDR *</b><i>xdrs</i><b>, unsigned char *</b><i>ucp</i><b>);
</b></pre>
<dd>A filter primitive that translates between <i>unsigned</i> C characters and their external representations. This routine returns one if it succeeds, zero
otherwise.
<dt>

<pre class="code"><b>bool_t xdr_u_int(XDR *</b><i>xdrs</i><b>, unsigned *</b><i>up</i><b>);
</b></pre>
<dd>A filter primitive that translates between C <i>unsigned</i> integers and their external representations. This routine returns one if it succeeds, zero
otherwise.
<dt>

<pre class="code"><b>bool_t xdr_u_long(XDR *</b><i>xdrs</i><b>, unsigned long *</b><i>ulp</i><b>);
</b></pre>
<dd>A filter primitive that translates between C <i>unsigned long</i> integers and their external representations. This routine returns one if it succeeds, zero
otherwise.
<dt>

<pre class="code"><b>bool_t xdr_u_short(XDR *</b><i>xdrs</i><b>, unsigned short *</b><i>usp</i><b>);
</b></pre>
<dd>A filter primitive that translates between C <i>unsigned short</i> integers and their external representations. This routine returns one if it succeeds,
zero otherwise.
<dt>

<pre class="code"><b>bool_t xdr_union(XDR *</b><i>xdrs</i><b>, int *</b><i>dscmp</i><b>, char *</b><i>unp</i><b>,
                 struct xdr_discrim *</b><i>choices</i><b>,
                 xdrproc_t</b> <i>defaultarm</i><b>);     /* may equal NULL */
</b></pre>
<dd>A filter primitive that translates between a discriminated C <i>union</i> and its corresponding external representation. It first translates the
discriminant of the union located at <i>dscmp</i>. This discriminant is always an <i>enum_t</i>. Next the union located at <i>unp</i> is translated. The
argument <i>choices</i> is a pointer to an array of <b>xdr_discrim</b>() structures. Each structure contains an ordered pair of [<i>value</i>,<i>proc</i>]. If
the union's discriminant is equal to the associated <i>value</i>, then the <i>proc</i> is called to translate the union. The end of the <b>xdr_discrim</b>()
structure array is denoted by a routine of value NULL. If the discriminant is not found in the <i>choices</i> array, then the <i>defaultarm</i> procedure is
called (if it is not NULL). Returns one if it succeeds, zero otherwise.
<dt>

<pre class="code"><b>bool_t xdr_vector(XDR *</b><i>xdrs</i><b>, char *</b><i>arrp</i><b>, unsigned int</b> <i>size</i><b>,
                  unsigned int</b> <i>elsize</i><b>, xdrproc_t</b> <i>elproc</i><b>);
</b></pre>
<dd>A filter primitive that translates between fixed-length arrays and their corresponding external representations. The argument <i>arrp</i> is the address of
the pointer to the array, while <i>size</i> is the element count of the array. The argument <i>elsize</i> is the <i>sizeof</i> each of the array's elements,
and <i>elproc</i> is an XDR filter that translates between the array elements' C form, and their external representation. This routine returns one if it
succeeds, zero otherwise.
<dt>

<pre class="code"><b>bool_t xdr_void(void);
</b></pre>
<dd>This routine always returns one. It may be passed to RPC routines that require a function argument, where nothing is to be done.
<dt>

<pre class="code"><b>bool_t xdr_wrapstring(XDR *</b><i>xdrs</i><b>, char **</b><i>sp</i><b>);
</b></pre>
<dd>A primitive that calls <b>xdr_string(xdrs, sp,MAXUN.UNSIGNED );</b> where <b>MAXUN.UNSIGNED</b> is the maximum value of an unsigned integer.
<b>xdr_wrapstring</b>() is handy because the RPC package passes a maximum of two XDR routines as arguments, and <b>xdr_string</b>(), one of the most frequently
used primitives, requires three. Returns one if it succeeds, zero otherwise.
</dl>
<h2>See Also</h2>

<p><b><a href="rpc">rpc</a></b>(3)
<p>The following manuals:
<dl compact>
<dd>eXternal Data Representation Standard: Protocol Specification<br>
eXternal Data Representation: Sun Technical Notes<i><br>
XDR: External Data Representation Standard</i>, RFC 1014, Sun Microsystems, Inc., USC-ISI.
</dl>

<!-- google_ad_section_end -->
<div id=adbottom>
<script type="text/javascript"><!--
google_ad_client = "pub-5823754184406795";
google_ad_slot = "8789940313";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="//pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>

</div>
<div id=menu>
<a href="http://www.die.net/"><img
src="/style/logo.png" alt="die.net" width=119 height=121 border=0></a>


<dl><dd>
<form id="cse-search-box-menu" action="http://www.google.com/cse">
<label><a href="http://www.die.net/search/">site search</a></label>
<input name="q" type="text" size="10">
<span style="font-family:Arial, Helvetica, sans-serif; font-size:75%">Google Custom Search</span>
<input type="hidden" name="sa" value="Search">
<input type="hidden" name="ie" value="ISO-8859-1">
<input type="hidden" name="cx" value="partner-pub-5823754184406795:54htp1rtx5u">
<input type="hidden" name="cof" value="FORID:9">
</form>
<script type="text/javascript">
<!--
document.forms["cse-search-box-menu"].action = "http://www.die.net/search/";
// -->
</script>
</dd></dl>




<dl>
<dt>Library</dt>
<dd><a href="http://linux.die.net/">linux docs</a></dd>
<dd><a href="http://linux.die.net/man/">linux man pages</a></dd>
<dd><a href="http://www.die.net/musings/page_load_time/">page load time</a></dd>
</dl>
<dl>
<dt>Toys</dt>
<dd><a href="http://www.die.net/earth/">world sunlight</a></dd>
<dd><a href="http://www.die.net/moon/">moon phase</a></dd>
<dd><a href="http://trace.die.net/">trace explorer</a></dd>
</dl>


<dl>
<dt><a href="/man/3/"><img src="/style/back.gif" alt="Back"
width=20 height=22 border=0></a></dt>
</dl>

</div></div>
<script type="text/javascript">
<!--
if (top.location != self.location) top.location = self.location;
if (/[?&][pq]=/.test(document.referrer)) document.write(unescape("%3Cscript src='/style/highlight.js' type='text/javascript'%3E%3C/script%3E"));
function googleTranslateElementInit() {new google.translate.TranslateElement({pageLanguage: 'en', floatPosition: google.translate.TranslateElement.FloatPosition.TOP_RIGHT, gaTrack: true, gaId: 'UA-50820-6'});}
if (!/^en/i.test(window.navigator.userLanguage||window.navigator.language)) document.write(unescape("%3Cscript src='//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit' type='text/javascript'%3E%3C/script%3E"));
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
// -->
</script>
</body>
</html>
