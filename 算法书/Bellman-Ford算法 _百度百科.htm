
<!DOCTYPE html><!--STATUS OK--><html><head><title> Bellman-Ford算法 _百度百科</title><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><meta name="Description" content="Bellman-ford算法是求含负权图的单源最短路径算法，效率很低，但代码很容易写。即进行不停地松弛（原文是这么写的，为什么要叫松弛，争议很大），每次松弛把每条边都更新一下，若n-1次松弛后还能更新，则说明图中有负环，无法得出结果，否则就成功完成。Bellman-ford算法有一个小优化：每次松弛先..." /><meta name="Keywords" content="Bellman-Ford算法  百度百科 baike 算法介绍 适用条件&amp;范围 算法描述 描述性证明 伪代码 参考代码 引申内容 算法流程 bellman-ford bellmanford" /><link rel="apple-touch-icon" href="http://img.baidu.com/img/baike/wap/iphone4_logo.png" /><link rel="stylesheet" href="http://baike.bdimg.com/static/lemma/layout/layout_3733e54b.css"/><link rel="stylesheet" type="text/css" href="http://baike.bdimg.com/static/lemma/view3/view3_47357a6a.css"/><script>(function(){window.PDC={_timing:{},_opt:{sample:0.01},_analyzer:{loaded:false,url:"http://static.tieba.baidu.com/tb/pms/wpo.pda.js?v=2.9",callbacks:[]},_render_start:+new Date,extend:function(b,a){for(property in b){a[property]=b[property]}return a},metadata:function(){var c=this._opt;var e={env:{user:(c.is_login==true?1:0),product_id:c.product_id,page_id:PDC._is_sample(c.sample)?c.page_id:0},render_start:this._render_start,timing:this._timing};var a=[];var d=c.special_pages||[];for(var b=0;b<d.length;b++){if(PDC._is_sample(d[b]["sample"])){a.push(d[b]["id"])}}if(a.length>0){e.env["special_id"]="["+a.join(",")+"]"}return e},init:function(a){this.extend(a,this._opt)},mark:function(a,b){this._timing[a]=b||+new Date},view_start:function(){this.mark("vt")},tti:function(){this.mark("tti")},page_ready:function(){this.mark("fvt")},first_screen:function(){var b=document.getElementsByTagName("img"),g=document.getElementsByTagName("IFRAME"),c=+new Date;var j=[],e=this;function f(i){var l=0;l=window.pageYOffset?window.pageYOffset:document.documentElement.scrollTop;try{l+=i.getBoundingClientRect().top}catch(k){}finally{return l}}this._setFS=function(){var m=e._opt["fsHeight"]||document.documentElement.clientHeight;for(var l=0;l<j.length;l++){var n=j[l],k=n.img,p=n.time,o=f(k);if(o>0&&o<m){c=p>c?p:c}}e._timing.fs=c};var h=function(){if(this.removeEventListener){this.removeEventListener("load",h,false)}j.push({img:this,time:+new Date})};for(var a=0;a<b.length;a++){(function(){var i=b[a];if(i.addEventListener){!i.complete&&i.addEventListener("load",h,false)}else{if(i.attachEvent){i.attachEvent("onreadystatechange",function(){if(i.readyState=="complete"){h.call(i,h)}})}}})()}for(var a=0,d=g.length;a<d;a++){(function(){var i=g[a];if(i.attachEvent){i.attachEvent("onload",function(){h.call(i,h)})}else{i.addEventListener("load",h,false)}})()}}};if(document.attachEvent){window.attachEvent("onload",function(){PDC.mark("let");PDC._setFS&&PDC._setFS();PDC._opt.ready!==false&&PDC._load_analyzer()})}else{window.addEventListener("load",function(){PDC.mark("lt")},false)}})();</script>
<link rel="stylesheet" type="text/css" href="http://baike.bdimg.com/static/common/pkg/framework_71698c7f.css" />
<link rel="stylesheet" type="text/css" href="http://baike.bdimg.com/static/common/ui/redEnv/redEnv_afa1db3f.css" />
<link rel="stylesheet" type="text/css" href="http://baike.bdimg.com/static/lemma/pkg/baseviewcss3_f94da6f5.css" />
<link rel="stylesheet" type="text/css" href="http://baike.bdimg.com/static/lemma/view_lemma/view_lemma_fb36c4d7.css" />
<script type="text/javascript" src="http://baike.bdimg.com/static/common/lib/base_b0ae69b4.js"></script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/common/pkg/framework_2fdf7f19.js' : ['/static/common/lib/tangram/base/base.js','/static/common/ui/search/search.js','/static/common/ui/nslog/nslog.js','/static/common/lib/fis/event/event.js','/static/common/ui/enctip/enctip.js','/static/common/ui/util/util.js','/static/common/ui/eventForLemma/eventForLemma.js','/static/common/lib/tangram/ui/Dialog/Dialog.js','/static/common/ui/dialog/dialog.js','/static/common/ui/fillusername/fillusername.js','/static/common/ui/userlogin/userlogin.js','/static/common/ui/delegate/delegate.js','/static/common/ui/fx/fx.js','/static/common/ui/message/message.js','/static/common/lib/magic/setup/suggestion/suggestion.js','/static/widget/common/footer/footer.js','/static/widget/common/footer_pad/footer_pad.js','/static/widget/common/nav/nav.js','/static/widget/common/nav_pad/nav_pad.js','/static/widget/common/picture_dialog/picture_dialog.js','/static/common/lib/tangram/fx/fx.js','/static/common/lib/tangram/fx/Timeline/Timeline.js','/static/common/lib/tangram/fx/create/create.js','/static/common/lib/tangram/fx/move/move.js','/static/common/lib/tangram/fx/moveBy/moveBy.js','/static/common/lib/fis/template/template.js','/static/common/lib/magic/magic.js','/static/common/lib/magic/Base/Base.js','/static/common/lib/magic/control/control.js','/static/common/lib/magic/control/Layer/Layer.js','/static/common/lib/magic/control/Dialog/Dialog.js','/static/common/lib/magic/Background/Background.js','/static/common/lib/magic/Dialog/Dialog.js','/static/common/lib/tangram/uiBase/uiBase.js','/static/common/lib/tangram/ui/Base/Base.js','/static/common/lib/tangram/ui/Dialog/Dialog$autoDispose/Dialog$autoDispose.js','/static/common/lib/tangram/ui/behavior/behavior.js','/static/common/lib/tangram/ui/behavior/statable/statable.js','/static/common/lib/tangram/ui/Button/Button.js','/static/common/lib/tangram/i18n/i18n.js','/static/common/lib/tangram/i18n/string/string.js','/static/common/lib/tangram/i18n/cultures/cultures.js','/static/common/lib/tangram/i18n/cultures/zh-CN/zh-CN.js','/static/common/lib/tangram/ui/Dialog/Dialog$button/Dialog$button.js','/static/common/lib/tangram/ui/Dialog/Dialog$closeButton/Dialog$closeButton.js','/static/common/lib/tangram/ui/behavior/coverable/coverable.js','/static/common/lib/tangram/ui/Dialog/Dialog$coverable/Dialog$coverable.js','/static/common/lib/tangram/ui/behavior/draggable/draggable.js','/static/common/lib/tangram/ui/Dialog/Dialog$draggable/Dialog$draggable.js','/static/common/lib/tangram/ui/Dialog/Dialog$iframe/Dialog$iframe.js','/static/common/lib/tangram/ui/Dialog/Dialog$keyboard/Dialog$keyboard.js','/static/common/lib/tangram/ui/Modal/Modal.js','/static/common/lib/tangram/ui/Modal/Modal$coverable/Modal$coverable.js','/static/common/lib/tangram/ui/Dialog/Dialog$modal/Dialog$modal.js','/static/common/lib/tangram/ui/behavior/resizable/resizable.js','/static/common/lib/tangram/ui/Dialog/Dialog$resizable/Dialog$resizable.js','/static/common/lib/magic/setup/setup.js','/static/common/lib/magic/control/Popup/Popup.js','/static/common/lib/magic/Popup/Popup.js','/static/common/lib/magic/control/Suggestion/Suggestion.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/common/ui/suggest/suggest_9e77bc0e.js' : ['/static/common/ui/suggest/suggest.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/common/ui/redEnv/redEnv_42a1ca75.js' : ['/static/common/ui/redEnv/redEnv.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/common/ui/jquery/jquery_ba31c430.js' : ['/static/common/ui/jquery/jquery.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/common/ui/jquery_cookie/jquery_cookie_e1872d3b.js' : ['/static/common/ui/jquery_cookie/jquery_cookie.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/common/ui/picture_user/picture_user_ff78eeb3.js' : ['/static/common/ui/picture_user/picture_user.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/widget/lemma/configModule/zhixin/zhixin_d30f54fe.js' : ['/static/widget/lemma/configModule/zhixin/zhixin.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/lemma/pkg/basenewviewjs_923a47ee.js' : ['/static/lemma/ui/view/catalog3/catalog3.js','/static/lemma/ui/view/lemmapic/lemmapic.js','/static/lemma/ui/view/edit/edit.js','/static/lemma/ui/view/sublemma3/sublemma3.js','/static/lemma/ui/view/BKDynamic/BKDynamic.js','/static/lemma/ui/view/lemmaPV/lemmaPV.js','/static/lemma/ui/view/sidecatalog/sidecatalog.js','/static/lemma/ui/view/lazyLoad/lazyLoad.js','/static/lemma/ui/view/usercard/usercard.js','/static/lemma/ui/view/reference3/reference3.js','/static/lemma/ui/view/reftip/reftip.js','/static/lemma/ui/view/addMeanItem/addMeanItem.js','/static/lemma/ui/view/nslog/nslog.js','/static/lemma/ui/view/horizonScroll/horizonScroll.js','/static/lemma/ui/view/exManagerTip/exManagerTip.js','/static/lemma/ui/view/fx/fx.js','/static/lemma/ui/view/returnToTop/returnToTop.js','/static/lemma/ui/view/vote3/vote3.js','/static/lemma/ui/view/contributors3/contributors3.js','/static/lemma/ui/view/updown/updown.js','/static/lemma/ui/view/userRight3/userRight3.js','/static/lemma/ui/view/topToolbar/topToolbar.js','/static/lemma/ui/view/controller3/controller3.js','/static/lemma/ui/view/maad3/maad3.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/widget/lemma/picture_dialog/picture_dialog_8f148e76.js' : ['/static/widget/lemma/picture_dialog/picture_dialog.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/lemma/pkg/bottomviewjs_4b6f9fa0.js' : ['/static/widget/lemma/focusAndRelation/focusAndRelation.js','/static/lemma/ui/view/vote/vote.js','/static/lemma/ui/view/albumcollection/albumcollection.js','/static/lemma/ui/view/share/share.js','/static/lemma/ui/view/coeditor/coeditor.js','/static/lemma/ui/view/relation/relation.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/lemma/ui/view/catalog/catalog_3ff205bf.js' : ['/static/lemma/ui/view/catalog/catalog.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/lemma/ui/view/sublemma/sublemma_efd14502.js' : ['/static/lemma/ui/view/sublemma/sublemma.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/lemma/ui/view/ipad/ipad_02bedfd1.js' : ['/static/lemma/ui/view/ipad/ipad.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/lemma/ui/view/albumcollection3/albumcollection3_4a681a74.js' : ['/static/lemma/ui/view/albumcollection3/albumcollection3.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/lemma/pkg/modulejs_c6cb185a.js' : ['/static/lemma/ui/view/shipin/shipin.js','/static/lemma/ui/view/page_commonModule/page_commonModule.js','/static/lemma/ui/view/music/music.js','/static/lemma/ui/view/series/series.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/lemma/ui/view/index/index_ddde7d9e.js' : ['/static/lemma/ui/view/index/index.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/lemma/ui/view/pic/pic_ba3ab51e.js' : ['/static/lemma/ui/view/pic/pic.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/lemma/ui/view/jiaoyu/jiaoyu_816f951a.js' : ['/static/lemma/ui/view/jiaoyu/jiaoyu.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/lemma/ui/view/authModule/authModule_6c0ca137.js' : ['/static/lemma/ui/view/authModule/authModule.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/lemma/ui/view/reference/reference_03a41edb.js' : ['/static/lemma/ui/view/reference/reference.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/lemma/ui/view/vertical/vertical_4e1b8216.js' : ['/static/lemma/ui/view/vertical/vertical.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/lemma/ui/view/preview_albumcollection/preview_albumcollection_238696fc.js' : ['/static/lemma/ui/view/preview_albumcollection/preview_albumcollection.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/lemma/ui/view/describeTips/describeTips_434ed2a8.js' : ['/static/lemma/ui/view/describeTips/describeTips.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/lemma/ui/view/collect/collect_724e9fe8.js' : ['/static/lemma/ui/view/collect/collect.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/lemma/ui/view/tipForIE6/tipForIE6_a1301209.js' : ['/static/lemma/ui/view/tipForIE6/tipForIE6.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/lemma/ui/view/adside/adside_6267a324.js' : ['/static/lemma/ui/view/adside/adside.js']});</script>
<script type="text/javascript">F._fileMap({'http://baike.bdimg.com/static/lemma/ui/view/tablesort/tablesort_253273c3.js' : ['/static/lemma/ui/view/tablesort/tablesort.js']});</script>
</head><script>PDC.mark("ht");</script><body id="view" class="u-body "><div id="wrap" class="u-wrap "><div id="header" class="u-header"><div id="userbar"></div><div id="search" class="clearfix"><div id="logo"><a title="到百科首页" href="/" class="nslog:1008"><img width="132" height="44" src="http://img.baidu.com/img/baike/logo-baike.png" /></a>
</div><div id="search-content"><p class="nv nslog-area:1009" log-data-detail="{page:'index'}"><a wdfield="q" data-href="http://news.baidu.com/?fr=bks0000" href="http://news.baidu.com/ns?tn=news&cl=2&rn=20&ct=1&fr=bks0000&ie=utf-8&word=" >&#26032;&#38395;</a><a wdfield="q" data-href="http://www.baidu.com/?ie=utf-8&fr=bks0000" href="http://www.baidu.com/s?ie=utf-8&fr=bks0000&wd=" >&#32593;&#39029;</a><a wdfield="q" data-href="http://tieba.baidu.com/index.html?fr=bks0000" href="http://tieba.baidu.com/f?ie=utf-8&fr=bks0000&kw=">&#36148;&#21543;</a><a wdfield="q" data-href="http://zhidao.baidu.com/?fr=bks0000" href="http://zhidao.baidu.com/search?pn=0&&rn=10&lm=0&fr=bks0000&word=">&#30693;&#36947;</a><a wdfield="q" data-href="http://mp3.baidu.com/?fr=bks0000" href="http://music.baidu.com/search?f=ms&ct=134217728&ie=utf-8&rn=&lm=-1&pn=30fr=bks0000&key=">&#38899;&#20048;</a><a wdfield="q" data-href="http://image.baidu.com/?fr=bks0000" href="http://image.baidu.com/i?tn=baiduimage&ct=201326592&lm=-1&cl=2&nc=1&ie=utf-8&word=">&#22270;&#29255;</a><a wdfield="q" data-href="http://v.baidu.com/?fr=bks0000" href="http://v.baidu.com/v?ct=301989888&rn=20&pn=0&db=0&s=22&ie=utf-8&fr=bks0000&word=">&#35270;&#39057;</a><a wdfield="q" data-href="http://ditu.baidu.com/?fr=bks0000" href="http://map.baidu.com/m?ie=utf-8&fr=bks0000&word=">&#22320;&#22270;</a><strong>&#30334;&#31185;</strong><a wdfield="q" data-href="http://wenku.baidu.com/?fr=bks0000" href="http://wenku.baidu.com/search?lm=0&od=0&ie=utf-8&fr=bks0000&word=">&#25991;&#24211;</a></p><form action="/search/word" id="f1" method="get" name="f1" target="_self"><span class="s_ipt_wr"><span><input autocomplete="off" autocorrect="off" class="s_ipt" onwebkitspeechchange="this.form.submit();" lang="zh-CN" x-webkit-grammar="builtin:search" x-webkit-speech="true" id="word" maxlength="100" name="word" tabindex="1" value="bellman-ford"></span></span><span class="s_btn_wr" style="margin-right:4px"><span><input class="s_btn nslog:1010" log-data-detail="{page:'index'}" onclick="this.form.pic.value=1;" onmousedown="this.className='s_btn s_btn_h nslog:1010';" onmouseout="this.className='s_btn nslog:1010';" tabindex="2" type="submit" value="&#36827;&#20837;&#35789;&#26465;" style="z-index: 9; position: relative;"></span></span><span class="s_btn_wr"><span><input class="s_btn nslog:1011" log-data-detail="{page:'index'}" onclick="this.form.pic.value=2;" onmousedown="this.className='s_btn s_btn_h nslog:1011';" onmouseout="this.className='s_btn nslog:1011'" tabindex="3" type="submit" value="&#25628;&#32034;&#35789;&#26465;" style="z-index: 9; position: relative; "><b style="z-index: 9; position: relative; "></b><b style="z-index: 9; position: relative; "></b></span></span><input id="sw1" name="pic" type="hidden" value="1"><input name="sug" type="hidden" value="1"><input id="search-enc" name="enc" type="hidden" value="utf8"></form></div><div id="help"><a class="c-help" href="http://baike.baidu.com/cms/s/help/index.html" target="_blank">&#24110;&#21161;</a></div></div><script type="text/javascript">F.use("/static/common/lib/tangram/base/base.js", function(baidu){F.use(["/static/common/ui/search/search.js"], function(e){baidu.event.once("word","focus",function(){F.use('/static/common/ui/suggest/suggest.js',function(suggest){suggest.init();});});e.init(false);}); });F.use("/static/common/lib/tangram/base/base.js", function(baidu){baidu.dom.ready(function(){if (window.console){var cons = console;if (cons){cons.log("喜欢看百科的代码，百度百科欢迎你的加入! 请邮件至spacehr@baidu.com");cons.log("请在邮件中注明%c来自:console","color:red;font-weight:bold;");}}});});</script></div><div id="nav"><div class="g-row nav-container"><ul class="nav1 clearfix nslog-area:1000"><li class="first"><span class="split-line"><a href="/" class=" nslog:9100">首页</a></span></li><li class="category"><span class="split-line"><a href="javascript:;" class="">分类频道</a></span><span class="ico"></span></li><li class="special"><span class="split-line"><a href="###">特色百科</a></span><span class="ico"></span></li><li class="play"><span class="split-line"><a href="###">玩转百科</a></span><span class="ico"></span></li><li class="usergroup"><span class="split-line"><a href="###">百科用户</a></span><span class="ico"></span></li><li class="schooluser"><span class="split-line"><a href="http://baike.baidu.com/xiaoyuan" target="_blank">百科校园</a></span></li><li class="five"><span class="split-line"><a target="_blank" class="nslog:9119" href="http://baike.baidu.com/hezuo/">百科合作</a></span></li></ul><ul class="shortcutnav"><li><a target="_blank" href="http://baike.baidu.com/m#download">手机百科</a></li><li class="last"><a href="http://baike.baidu.com/usercenter" class="nslog:9121" onclick="redirectCheck(event)">个人中心</a></li></ul><ul class="subnav1 d-n clearfix nslog-area:6552"><li class="nslog:9101"><a href="/ziran" >自然</a></li><li class="nslog:9102"><a href="/wenhua" >文化</a></li><li class="nslog:9103"><a href="/dili" >地理</a></li><li class="nslog:9104"><a href="/lishi" >历史</a></li><li class="nslog:9105"><a href="/shenghuo" >生活</a></li><li class="nslog:9106"><a href="/shehui" >社会</a></li><li class="nslog:9107"><a href="/yishu" >艺术</a></li><li class="nslog:9108"><a href="/renwu" >人物</a></li><li class="nslog:9109"><a href="/jingji" >经济</a></li><li class="nslog:9110"><a href="/keji" >科技</a></li><li class="nslog:9111"><a href="/tiyu" >体育</a></li></ul><ul class="subnavspecial subnavspecial1 d-n clearfix"><li><a target="_blank" href="http://baike.baidu.com/museum/" class="sub-cur nslog:9112">数字博物馆</a></li><li><a target="_blank" href="http://baike.baidu.com/city/" class="sub-cur nslog:9212">城市百科</a></li></ul><ul class="subnavplay subnavplay1 d-n clearfix"><li><a href="/wikitask/usertask?pagetype=homepage" class="sub-cur  nslog:9176">百科任务</a></li><li><a href="http://baike.baidu.com/uc/recommend/" class="sub-cur  nslog:9113">完善词条</a></li><li><a href="http://baike.baidu.com/team/org/seniorcourse " class="sub-cur  nslog:9137">导师计划</a></li><li><a href="http://baike.baidu.com/tese" class="sub-cur  nslog:9114">特色词条</a></li><li><a target="_blank" href="http://baike.baidu.com/mall/" class="sub-cur nslog:9115">百科商城</a></li></ul><ul class="subnavusergroup subnavusergroup1 d-n clearfix"><li><a href="/kedou" class="sub-cur nslog:9117">蝌蚪团</a></li></ul><script type="text/javascript">F.use("/static/widget/common/nav/nav.js");function redirectCheck(e){if(!window.curUser){baidu.event.preventDefault(e);userlogin(function(){location.href = '/usercenter';});}}</script></div></div><div id="page" class="u-page" style=""><script>function resizeBodyWidth() {if( window.document.body.offsetWidth <= 1280) {document.getElementById("view").className += " small-screen";}}resizeBodyWidth();</script><script>var baidu;var logPageType = "view",logLemmaId = "1481053",logSubLemmaId = "1481053";var verticalData = null;var doubtBlackList=true;var isRainbow=false;window.shareLemmaUrl = "http:\/\/baike.baidu.com\/view\/1481053.htm";window.lemmaNew = true;var sublemmaIds=[1481053];var ABtestSwitch = 0;window.baikeInfo = {};baikeInfo.expFlag = false;baikeViewInfo ={versionPriod:"new",newLemmaId:"1089090",titleInUrl:"Bellman-Ford%E7%AE%97%E6%B3%95",id:"1481053",newLemmaIdEnc:"1599cf4ff5b01644c91302bb",versionId:"67321840",subLemmaId:"1481053",subVersionId:"67321840",editable:"true",title:"Bellman-Ford算法",expIndex:"0", subLen:"1",isMulit:0,subList:[{"subLemmaDesc":"Bellman-Ford\u7b97\u6cd5","subLemmaId":1481053,"subVersionId":67321840}],cataList:[],pageType:"view",isPolyseme:0,isOrgLemma:0};F.use(["/static/common/ui/nslog/nslog.js","/static/common/ui/picture_user/picture_user.js"],function(nslog,PictureUser){nslog.set("smallFlow",PictureUser.getUserType());});</script><div id="content-wrap" class="layout grid-m0s245"><div id="content" class="col-main article"><div id="main-wrap" class="main-wrap u-main-wrap"><div class="content-bd main-body"><div class="text" id="sec-content0"><div class="tool-wrap" style="height:24px;"> <div class="bk_title_body"> <a id="add-meanItem" class="rb-add-meanItem" href="javascript:void(0);" title="添加义项"></a> <a id="polyin" class="split-lemma" title="拆分词条" href="/divideload/Bellman-Ford%E7%AE%97%E6%B3%95"></a><div class="collect_btn" id="collectBtn"><div class="collect_icon"></div><span class="collect_txt">收藏</span> <div class="collect-tip">查看<a href="/uc/favolemma" target="_blank">我的收藏</a></div></div><div class="vote_btn vote_btn_1"><div class="vote_icon"></div><span class="vote_num">&nbsp;</span><span class="vote_text" style="display:none;">有用+1</span></div><script type="text/javascript" id="bdshare_js" data="type=tools&amp;mini=1&amp;uid=71"></script><script type="text/javascript" id="bdshell_js"></script><script type="text/javascript">F.use(['/static/common/lib/tangram/base/base.js','/static/common/ui/nslog/nslog.js'],function(baidu,nslog){baidu.dom.ready(function(){var a = Math.ceil(1.2);window.bds_config = {'snsKey': {'tsina': '3417820038','tqq': '801199450'},'bdComment': ' '};if(window.shareLemmaUrl){document.getElementById('bdshell_js').src = "http://baike.baidu.com/cms/s/baiduShare/shell_v2.js?t=" + new Date().getHours();}else{document.getElementById('bdshell_js').src = "http://share.baidu.com/static/js/shell_v2.js?t=" + new Date().getHours();}var ele = baidu("#bdshareside");if (ele[0] && baidu.ie && baidu.ie <= 7) {baidu.setStyle(ele, "position", "absolute");ele[0].style.setExpression("top", "eval((document.documentElement||document.body).scrollTop+" + 270 + ") + 'px'");}window.curShare;var url = location.href;baidu(".bk_title_body #bdshare .shareIcon a").click(function(){nslog(location.href, 9067);});baidu("#bdshareside #bdshare .shareIcon a").click(function(){nslog(location.href, 9068);});var sharetime = setInterval(function(){if(baidu("#bdshare_m")[0]) {clearInterval(sharetime);baidu("#bdshare_m li a").click(function(){if(curShare == 'top') {nslog(location.href, 9067);}else if (curShare == 'side') {nslog(location.href, 9068);}});}}, 2000);var sharetime2 = setInterval(function(){if(baidu("#bdshare_pop")[0]) {clearInterval(sharetime2);baidu("#bdshare_pop li a").click(function(){if(curShare == 'top') {nslog(location.href, 9067);}else if (curShare == 'side') {nslog(location.href, 9068);}});}}, 2000);function updateShareIcon(class1, class2, text) {var ele = baidu(class1);ele.attr("class", class2);ele.html(text);}function updateShare() {updateShareIcon("ul .bds_mshare", "bds_douban db", "豆瓣网");updateShareIcon("ul .bds_qzone", "bds_tieba bdtb", "百度贴吧");updateShareIcon("ul .bds_tsina", "bds_tsohu shwb", "搜狐微博");updateShareIcon("ul .bds_tqq", "bds_kaixin001 kxw", "开心网");}baidu(".bk_title_body .bds_more").mouseover(function(){window.curShare = 'top';});baidu("#bdshareside #bdshare .bds_more").mouseover(function(){window.curShare = 'side';});});});</script><div id="bdshare" log-set-param="view_sharetop" class="bdshare_t bds_tools get-codes-bdshare bk_share log-set-param" data="{'url':'http://baike.baidu.com/view/1481053.htm','text':'【Bellman-Ford算法_百度百科】Bellman-ford算法是求含负权图的单源最短路径算法，效率很低，但代码很容易写。即进行不停地松弛（原文是这么写的，为什么要叫松弛，争议很大），每次松弛把每条边都更新一下，若n-1次松弛后还能更新，则说明图中有负环，无法得出结果，否则就成功完成。Bellman-ford算法有一个小优化：每次松弛先.....（分享自@百度百科）','pic':''}"><span class="bds_more"><img src="/static/lemma/view3/img/icon/share_f2c55a22.png" /><a class="shareCount" id="shareCount"></a></span></div></div></div><h1 class="title maintitle" id=""><span class="lemmaTitleH1">Bellman-Ford算法</span><span class="bk-editable-lemma-btns bk3-title-wrap"><a id="lemma-edit" class="bk-editable-edit nslog:10000401" href="javascript:void(0)" data-edit-id="1089090:Bellman-Ford%E7%AE%97%E6%B3%95" data-title="编辑">编辑</a></span>      <span class="view-tip-panel"> bellman-ford一般指Bellman-Ford算法 </span></h1><div class="edit-prompt">本词条缺少<strong>信息栏</strong>、<strong>名片图</strong>，补充相关内容使词条更完整，还能快速升级，赶紧来<a data-edit-id="1089090:Bellman-Ford%E7%AE%97%E6%B3%95" class="edit-prompt-link">编辑</a>吧！</div>         <div class="mod-top" id="card-container" class="clearfix"><div class="card-summary nslog-area clearfix" data-nslog-type="72"><div class="card-summary-content"><div class="para">Bellman-ford算法是求含负权<a target=_blank href="/view/143347.htm">图</a>的单源最短路径算法，效率很低，但代码很容易写。即进行不停地<a target=_blank href="/view/208340.htm">松弛</a>（原文是这么写的，为什么要叫松弛，争议很大），每次松弛把每条边都更新一下，若n-1次松弛后还能更新，则说明图中有负环，无法得出结果，否则就成功完成。Bellman-ford算法有一个小<a target=_blank href="/view/548.htm">优化</a>：每次<a target=_blank href="/view/208340.htm">松弛</a>先设一个标识flag，初值为FALSE，若有边更新则赋值为TRUE，最终如果还是FALSE则直接成功退出。Bellman-ford算法浪费了许多时间做无必要的<a target=_blank href="/view/208340.htm">松弛</a>，所以<a target=_blank href="/view/682464.htm">SPFA</a>算法用<a target=_blank href="/view/38959.htm">队列</a>进行了<a target=_blank href="/view/548.htm">优化</a>，效果十分显著，高效难以想象。SPFA还有<a target=_blank href="/view/3748799.htm">SLF</a>，LLL，滚动数组等<a target=_blank href="/view/548.htm">优化</a>。</div></div></div></div>                                      <div class="z-catalog nslog-area log-set-param" log-set-param="catalogshow" data-nslog-type="1016" id="catalog-0" data-subindex="0" style=""> <h2><span>目录</span></h2><dl id="catalog-holder-0" class='holder hideholder' >  <div class="lie3" style="min-height:137.666666667px;">  <dd class="catalog-item 0" ><p class="z-catalog-i1"><span class="catalog-item-index1">1</span><a href="#1" class="nslog:1274" catalog="true" name="STAT_ONCLICK_UNSUBMIT_CATALOG" onclick="return false;">算法介绍</a></p></dd>    <dd class="catalog-item 28" ><p class="z-catalog-i1"><span class="catalog-item-index1">2</span><a href="#2" class="nslog:1274" catalog="true" name="STAT_ONCLICK_UNSUBMIT_CATALOG" onclick="return false;">适用条件&amp;范围</a></p></dd>    <dd class="catalog-item 77" ><p class="z-catalog-i1"><span class="catalog-item-index1">3</span><a href="#3" class="nslog:1274" catalog="true" name="STAT_ONCLICK_UNSUBMIT_CATALOG" onclick="return false;">算法描述</a></p></dd>    <dd class="catalog-item 105" ><p class="z-catalog-i1"><span class="catalog-item-index1">4</span><a href="#4" class="nslog:1274" catalog="true" name="STAT_ONCLICK_UNSUBMIT_CATALOG" onclick="return false;">描述性证明</a></p></dd>    <dd class="catalog-item 133" ><p class="z-catalog-i1"><span class="catalog-item-index1">5</span><a href="#5" class="nslog:1274" catalog="true" name="STAT_ONCLICK_UNSUBMIT_CATALOG" onclick="return false;">伪代码</a></p></dd>     </div><div class="lie3"  style="min-height:137.666666667px;">    <dd class="hold-catalog-li er 0"> <span>▪</span> <a href="#5_1" catalog="true" onclick="return false;">PASCAL</a>   </dd>   <dd class="hold-catalog-li er 21"> <span>▪</span> <a href="#5_2" catalog="true" onclick="return false;">C&amp;C++</a>   </dd>   <dd class="hold-catalog-li er 42"> <span>▪</span> <a href="#5_3" catalog="true" onclick="return false;">时空复杂度</a>   </dd>  <dd class="catalog-item 63" style="margin-top:6px;"><p class="z-catalog-i1"><span class="catalog-item-index1">6</span><a href="#6" class="nslog:1274" catalog="true" name="STAT_ONCLICK_UNSUBMIT_CATALOG" onclick="return false;">参考代码</a></p></dd>     <dd class="hold-catalog-li er 91"> <span>▪</span> <a href="#6_1" catalog="true" onclick="return false;">PASCAL</a>   </dd>   <dd class="hold-catalog-li er 112"> <span>▪</span> <a href="#6_2" catalog="true" onclick="return false;">Matlab</a>   </dd>   <dd class="hold-catalog-li er 133"> <span>▪</span> <a href="#6_3" catalog="true" onclick="return false;">C</a>   </dd>   </div><div class="lie3" style="min-height:137.666666667px;border-right:none;">   <dd class="catalog-item 0" style="margin-top:6px;"><p class="z-catalog-i1"><span class="catalog-item-index1">7</span><a href="#7" class="nslog:1274" catalog="true" name="STAT_ONCLICK_UNSUBMIT_CATALOG" onclick="return false;">引申内容</a></p></dd>    <dd class="catalog-item 28" ><p class="z-catalog-i1"><span class="catalog-item-index1">8</span><a href="#8" class="nslog:1274" catalog="true" name="STAT_ONCLICK_UNSUBMIT_CATALOG" onclick="return false;">算法流程</a></p></dd>     <dd class="hold-catalog-li er 56"> <span>▪</span> <a href="#8_1" catalog="true" onclick="return false;">算法代码</a>   </dd>   <dd class="hold-catalog-li er 77"> <span>▪</span> <a href="#8_2" catalog="true" onclick="return false;">算法的优化</a>   </dd>   </div> </dl><div id="lemma-catalog-bottombg" ></div></div><div class="clear"></div><div id="lemmaContent-0" class="lemma-main-content"> <div class="anchor-list"><a name="1" class="anchor-1"></a><a name="sub1481053_1" class="anchor-1"></a><a name="算法介绍" class="anchor-1"></a></div><h2 class="headline-1"><span class="headline-1-index">1</span><span class="headline-content">算法介绍</span><span class="text_edit editable-title" style="margin-left: 10px;" data-edit-id="1089090:Bellman-Ford%E7%AE%97%E6%B3%95:1"><a href="#" class="nslog:1019" title="编辑本段">编辑</a></span></h2><div class="para"><a target=_blank href="/view/7839.htm">Dijkstra算法</a>无法判断含负权边的图的最短路。如果遇到负权，在没有负权回路存在时（负权回路的含义是，回路的权值和为负。）即便有负权的边，也可以采用Bellman-Ford算法正确求出最短路径，。</div>
<div class="para">Bellman-Ford算法能在更普遍的情况下（存在负权边）解决单源点<a target=_blank href="/view/349189.htm">最短路径</a>问题。对于给定的带权（有向或无向）图 G=（V,E），其源点为s，加权函数 w是 边集 E 的映射。对图G运行Bellman-Ford算法的结果是一个布尔值，表明图中是否存在着一个从源点s可达的负权回路。若不存在这样的回路，算法将给出从源点s到 图G的任意顶点v的<a target=_blank href="/view/349189.htm">最短路径</a>d[v]。</div><div class="anchor-list"><a name="2" class="anchor-1"></a><a name="sub1481053_2" class="anchor-1"></a><a name="适用条件&amp;范围" class="anchor-1"></a></div><h2 class="headline-1"><span class="headline-1-index">2</span><span class="headline-content">适用条件&amp;范围</span><span class="text_edit editable-title" style="margin-left: 10px;" data-edit-id="1089090:Bellman-Ford%E7%AE%97%E6%B3%95:2"><a href="#" class="nslog:1019" title="编辑本段">编辑</a></span></h2><div class="para">1.<a target=_blank href="/view/1939816.htm">单源最短路径</a>(从源点s到其它所有顶点v);</div>
<div class="para">2.有向图&amp;无向图(无向图可以看作(u,v),(v,u)同属于边集E的有向图);</div>
<div class="para">3.边权可正可负(如有负权回路输出错误提示);</div>
<div class="para">4.<a target=_blank href="/view/1008149.htm">差分约束系统</a>;</div><div class="anchor-list"><a name="3" class="anchor-1"></a><a name="sub1481053_3" class="anchor-1"></a><a name="算法描述" class="anchor-1"></a></div><h2 class="headline-1"><span class="headline-1-index">3</span><span class="headline-content">算法描述</span><span class="text_edit editable-title" style="margin-left: 10px;" data-edit-id="1089090:Bellman-Ford%E7%AE%97%E6%B3%95:3"><a href="#" class="nslog:1019" title="编辑本段">编辑</a></span></h2><div class="para">1,.初始化：将除源点外的所有顶点的最短距离估计值 d[v] ←+∞, d[s] ←0;</div>
<div class="para">2.迭代求解：反复对边集E中的每条边进行<a target=_blank href="/view/1984861.htm">松弛操作</a>，使得顶点集V中的每个顶点v的最短距离估计值逐步逼近其最短距离；（运行|v|-1次）</div>
<div class="para">3.检验负权回路：判断边集E中的每一条边的两个端点是否收敛。如果存在未收敛的顶点，则算法返回false，表明问题无解；否则算法返回true，并且从源点可达的顶点v的最短距离保存在 d[v]中。</div><div class="anchor-list"><a name="4" class="anchor-1"></a><a name="sub1481053_4" class="anchor-1"></a><a name="描述性证明" class="anchor-1"></a></div><h2 class="headline-1"><span class="headline-1-index">4</span><span class="headline-content">描述性证明</span><span class="text_edit editable-title" style="margin-left: 10px;" data-edit-id="1089090:Bellman-Ford%E7%AE%97%E6%B3%95:4"><a href="#" class="nslog:1019" title="编辑本段">编辑</a></span></h2><div class="para">首先指出，图的任意一条<a target=_blank href="/view/349189.htm">最短路径</a>既不能包含负权回路，也不会包含正权回路，因此它最多包含|v|-1条边。</div>
<div class="para">其次，从源点s可达的所有顶点如果 存在<a target=_blank href="/view/349189.htm">最短路径</a>，则这些最短路径构成一个以s为根的最短路径树。Bellman-Ford算法的<a target=_blank href="/view/461623.htm">迭代</a><a target=_blank href="/view/1984861.htm">松弛操作</a>，实际上就是按顶点距离s的层次，逐层生成这棵<a target=_blank href="/view/349189.htm">最短路径</a>树的过程。</div>
<div class="para">在对每条边进行第1遍<a target=_blank href="/view/208340.htm">松弛</a>的时候，生成了从s出发，层次至多为1的那些树枝。也就是说，找到了与s至多有1条边相联的那些顶点的<a target=_blank href="/view/349189.htm">最短路径</a>；对每条边进行第2遍<a target=_blank href="/view/208340.htm">松弛</a>的时候，生成了第2层次的树枝，就是说找到了经过2条边相连的那些顶点的最短路径……。因为<a target=_blank href="/view/349189.htm">最短路径</a>最多只包含|v|-1 条边，所以，只需要循环|v|-1 次。</div>
<div class="para">每实施一次<a target=_blank href="/view/1984861.htm">松弛操作</a>，<a target=_blank href="/view/349189.htm">最短路径</a>树上就会有一层顶点达到其最短距离，此后这层顶点的最短距离值就会一直保持不变，不再受后续松弛操作的影响。（但是，每次还要判断<a target=_blank href="/view/208340.htm">松弛</a>，这里浪费了大量的时间，怎么<a target=_blank href="/view/548.htm">优化</a>？单纯的优化是否可行？）</div>
<div class="para">注意：上述只对正权图有效。如果存在负权不一定第i次就能确定最短路，且与边的顺序有关。</div>
<div class="para">如果没有负权回路，由于<a target=_blank href="/view/349189.htm">最短路径</a>树的高度最多只能是|v|-1，所以最多经过|v|-1遍<a target=_blank href="/view/1984861.htm">松弛操作</a>后，所有从s可达的顶点必将求出最短距离。如果 d[v]仍保持 +∞，则表明从s到v不可达。</div>
<div class="para">如果有负权回路，那么第 |v| 遍<a target=_blank href="/view/1984861.htm">松弛操作</a>仍然会成功，这时，负权回路上的顶点不会收敛。<sup>[1]</sup><a class="anchor-inline" name="ref_[1]_1481053">&nbsp;</a></div><div class="anchor-list"><a name="5" class="anchor-1"></a><a name="sub1481053_5" class="anchor-1"></a><a name="伪代码" class="anchor-1"></a></div><h2 class="headline-1"><span class="headline-1-index">5</span><span class="headline-content">伪代码</span><span class="text_edit editable-title" style="margin-left: 10px;" data-edit-id="1089090:Bellman-Ford%E7%AE%97%E6%B3%95:5"><a href="#" class="nslog:1019" title="编辑本段">编辑</a></span></h2><h3 class="headline-2"><a name="5_1" class="anchor-2"></a><a name="sub1481053_5_1" class="anchor-2"></a><a name="伪代码_PASCAL" class="anchor-2"></a><span class="headline-content">PASCAL</span></h3><div class="para">For i:=1 to |V|-1 do</div>
<div class="para">For 每条边(u,v)∈E do</div>
<div class="para">Relax(u,v,w);</div>
<div class="para">For每条边(u,v)∈E do</div>
<div class="para">If dis[u]+w&lt;dis[v] Then Exit(False)</div><h3 class="headline-2"><a name="5_2" class="anchor-2"></a><a name="sub1481053_5_2" class="anchor-2"></a><a name="伪代码_C&amp;C++" class="anchor-2"></a><span class="headline-content">C&amp;C++</span></h3><div class="para">bool Bellman-Ford(G,w,s) //图G ，边集 函数 w ，s为源点</div>
<div class="para">1 for each vertex v ∈ V（G） //初始化 1阶段</div>
<div class="para">2 d[v] ←+∞;</div>
<div class="para">3 d[s] ←0; //1阶段结束</div>
<div class="para">4 for(int i=1;i&lt;|v|;i++) //2阶段开始，双重循环。</div>
<div class="para">5 for each edge（u,v） ∈E(G) //<a target=_blank href="/view/4103725.htm">边集数组</a>要用到，穷举每条边。</div>
<div class="para">6 if(d[v]&gt; d[u]+ w(u,v))//<a target=_blank href="/view/208340.htm">松弛</a>判断</div>
<div class="para">7 d[v]=d[u]+w(u,v); //<a target=_blank href="/view/1984861.htm">松弛操作</a>2阶段结束</div>
<div class="para">8 for each edge（u,v） ∈E(G)</div>
<div class="para">9 if(d[v]&gt; d[u]+ w(u,v))</div>
<div class="para">10 return false;</div>
<div class="para">11 return true;</div><h3 class="headline-2"><a name="5_3" class="anchor-2"></a><a name="sub1481053_5_3" class="anchor-2"></a><a name="伪代码_时空复杂度" class="anchor-2"></a><span class="headline-content">时空复杂度</span></h3><div class="para">算法<a target=_blank href="/view/104946.htm">时间复杂度</a>O(VE)。因为算法简单，适用范围又广，虽然<a target=_blank href="/view/544149.htm">复杂度</a>稍高，仍不失为一个很实用的算法。</div><div class="anchor-list"><a name="6" class="anchor-1"></a><a name="sub1481053_6" class="anchor-1"></a><a name="参考代码" class="anchor-1"></a></div><h2 class="headline-1"><span class="headline-1-index">6</span><span class="headline-content">参考代码</span><span class="text_edit editable-title" style="margin-left: 10px;" data-edit-id="1089090:Bellman-Ford%E7%AE%97%E6%B3%95:6"><a href="#" class="nslog:1019" title="编辑本段">编辑</a></span></h2><h3 class="headline-2"><a name="6_1" class="anchor-2"></a><a name="sub1481053_6_1" class="anchor-2"></a><a name="参考代码_PASCAL" class="anchor-2"></a><span class="headline-content">PASCAL</span></h3><div class="para">{<a target=_blank href="/view/1939816.htm">单源最短路径</a>的Bellman-ford算法</div>
<div class="para">执行v-1次，每次对每条边进行<a target=_blank href="/view/1984861.htm">松弛操作</a></div>
<div class="para">如有负权回路则输出&quot;Error&quot;</div>
<div class="para">}</div>
<div class="nodoubt-module"><pre class="brush: python">const
maxn=100;
maxe=maxn*(maxn-1)div2;
type
edge=record
a,b,w:integer;
end;
var
edges:array[1..maxe]ofedge;
dis:array[1..maxn]ofinteger;
pre:array[1..maxn]ofinteger;
e,n,s:integer;
procedureinit;
var
i:integer;
begin
e:=0;
assign(input,&#39;g，in&#39;);reset(input);
readln(n,s);
whilenoteofdo
begin
inc(e);
withedges[e]doreadln(a,b,w);
end;
fillchar(dis,sizeof(dis),$7f);//$7f是什么，解释替换$7f是127$在pascal中代表后面的数是16进制
dis[s]:=0;pre[s]:=s;
end;
procedurerelax(u,v,w:integer);
begin
ifdis[u]+w&lt;dis[v]then
begin
dis[v]:=dis[u]+w;
pre[v]:=u;
end
end;
functionbellman_ford:boolean;
var
i,j:integer;
begin
fori:=1ton-1do
forj:=1toedo
withedges[j]dorelax(a,b,w);
fori:=1toedo
withedges[i]do
ifdis[a]+w&lt;dis[b]thenexit(false);
exit(true)
end;
procedureprint_path(i:integer);
begin
ifpre[i]&lt;&gt;sthenprint_path(pre[i]);
write(&#39;--&gt;&#39;,i)
end;
procedureshow;
var
i:integer;
begin
fori:=1tondo
begin
write(i:3,&#39;:&#39;,dis[i]:3,&#39;:&#39;,s);
print_path(i);
writeln
end;
end;
{========main========}
begin
init;
ifbellman_fordthenshow
elsewriteln(&#39;Error!!&#39;)
end.
</pre></div><h3 class="headline-2"><a name="6_2" class="anchor-2"></a><a name="sub1481053_6_2" class="anchor-2"></a><a name="参考代码_Matlab" class="anchor-2"></a><span class="headline-content">Matlab</span></h3><div class="nodoubt-module"><pre class="brush: groovy">functionford(d,n,s)%d为已知图的邻接矩阵，n为顶点数（各顶点标号为1，2...,n），s为源点标号
fori=1:n%初始化dist，pre
dist(i)=inf;%dist（i）为s，i之间的最短路的长度
pre(i)=NaN;%pre（i）为s到i的最短路上i的前一个顶点
end
dist(s)=0;
fork=1:n-1
fori=1:n%松弛操作
forj=1:n
ifd(i,j)~=inf
ifdist(j)&gt;dist(i)+d(i,j)
dist(j)=dist(i)+d(i,j);
pre(j)=i;
end
end
end
end
end
fori=1:n
forj=1:n
ifd(i,j)~=inf
ifdist(i)+d(i,j)&lt;dist(j)%判断有无负权回路
error(&#39;negetiveweightcircut&#39;);
end
end
end
end
dist
pre
end
</pre></div><h3 class="headline-2"><a name="6_3" class="anchor-2"></a><a name="sub1481053_6_3" class="anchor-2"></a><a name="参考代码_C" class="anchor-2"></a><span class="headline-content">C</span></h3><div class="nodoubt-module"><pre class="brush: cpp">intBellmanFord(ints,Wltemdist[],intprev[],Graph)
{
inti,j,k,n,*count,*ub;
queuequ;
glinkp;
n=G-&gt;n;
if(s&lt;1||s&gt;n)
Error(&quot;Outofbounds&quot;);
count=malloc((n+1)*sizeof(int));
ub=malloc((n+1)*sizeof(int));
for(i=1;i&lt;=n;i++)
{
dist[i]=INT_MAX;
count[i]=0;
prev[i]=0;
ub[i]=0;
}
qu=QueueInit();
dist[s]=0;
EnterQueue(s,qu);
while(!QueueEmpty(qu))
{
k=DeleteQueue(qu);
ub[k]=0;
count[k]++;
if(count[k]&gt;n)
{
printf(&quot;cycleofnegativeweightexists!\n&quot;);
return0;
}
p=G-&gt;adj[k];
while(p)
{
j=p-&gt;v;
if(dist[j]&gt;dist[k]+p-&gt;w;
prev[j]=k;
if(!ub[j])
{
EnterQueue(j,qu);
ub[j]=1;
}
}
p=p-&gt;next;
}
}
return1;
}
</pre></div><div class="anchor-list"><a name="7" class="anchor-1"></a><a name="sub1481053_7" class="anchor-1"></a><a name="引申内容" class="anchor-1"></a></div><h2 class="headline-1"><span class="headline-1-index">7</span><span class="headline-content">引申内容</span><span class="text_edit editable-title" style="margin-left: 10px;" data-edit-id="1089090:Bellman-Ford%E7%AE%97%E6%B3%95:7"><a href="#" class="nslog:1019" title="编辑本段">编辑</a></span></h2><div class="para"><b>SPFA算法</b></div>
<div class="para"><a target=_blank href="/view/682464.htm">SPFA</a>(Shortest Path Faster Algorithm)是<a target=_blank href="/view/1867018.htm">Bellman-Ford</a>算法的一种<a target=_blank href="/view/38959.htm">队列</a>实现，减少了不必要的冗余计算。</div><div class="anchor-list"><a name="8" class="anchor-1"></a><a name="sub1481053_8" class="anchor-1"></a><a name="算法流程" class="anchor-1"></a></div><h2 class="headline-1"><span class="headline-1-index">8</span><span class="headline-content">算法流程</span><span class="text_edit editable-title" style="margin-left: 10px;" data-edit-id="1089090:Bellman-Ford%E7%AE%97%E6%B3%95:8"><a href="#" class="nslog:1019" title="编辑本段">编辑</a></span></h2><div class="para">算法大致流程是用一个<a target=_blank href="/view/38959.htm">队列</a>来进行维护。 初始时将源加入<a target=_blank href="/view/38959.htm">队列</a>。 每次从<a target=_blank href="/view/38959.htm">队列</a>中取出一个元素，并对所有与他相邻的点进行<a target=_blank href="/view/208340.htm">松弛</a>，若某个相邻的点松弛成功，则将其入队。 直到<a target=_blank href="/view/38959.htm">队列</a>为空时算法结束。</div><h3 class="headline-2"><a name="8_1" class="anchor-2"></a><a name="sub1481053_8_1" class="anchor-2"></a><a name="算法流程_算法代码" class="anchor-2"></a><span class="headline-content">算法代码</span></h3><div class="nodoubt-module"><pre class="brush: python">ProcedureSPFA;
Begin
initialize-single-source(G,s);
initialize-queue(Q);
enqueue(Q,s);
whilenotempty(Q)dobegin
u:=dequeue(Q);
foreachv∈adj[u]dobegin
tmp:=d[v];
relax(u,v);
if(tmp&lt;&gt;d[v])and(notvinQ)thenenqueue(v);
end;
end;
End;
</pre></div><h3 class="headline-2"><a name="8_2" class="anchor-2"></a><a name="sub1481053_8_2" class="anchor-2"></a><a name="算法流程_算法的优化" class="anchor-2"></a><span class="headline-content">算法的优化</span></h3><div class="para">分析 Bellman-Ford算法，不难看出，外层循环（迭代次数）|v|-1实际上取得是上限。由上面对算法正确性的证明可知，需要的迭代遍数等于最短路径树的高度。如果不存在负权回路，平均情况下的最短路径树的高度应该远远小于 |v|-1，在此情况下，多余最短路径树高的迭代遍数就是时间上的浪费，由此，可以依次来实施优化。</div>
<div class="para">从细节上分析，如果在某一遍迭代中，算法描述中第7行的松弛操作未执行，说明该遍迭代所有的边都没有被松弛。可以证明（怎么证明？）：至此后，边集中所有的边都不需要再被松弛，从而可以提前结束迭代过程。这样，优化的措施就非常简单了。</div>
<div class="para">设定一个布尔型标志变量 relaxed，初值为false。在内层循环中，仅当有边被成功松弛时，将 relaxed 设置为true。如果没有边被松弛，则提前结束外层循环。这一改进可以极大的减少外层循环的迭代次数。优化后的 bellman-ford函数如下。</div>
<div class="nodoubt-module"><pre class="brush: python">functionbellmanford(s:longint):boolean;
begin
fori:=1tonvdo
d[i]:=max;
d[s]:=0;
fori:=1tonv-1do
begin
relaxed:=false;
forj:=1TOnedo
if(d[edges[j].s]&lt;&gt;max)and(d[edges[j].e]&gt;d[edges[j].s]+edges[j].w)
thenbegin
d[edges[j].e]:=d[edges[j].s]+edges[j].w;
relaxed:=true;
end;
ifnotrelaxedthenbreak;
end;
fori:=1tonedo
ifd[edges[j].e]&gt;d[edges[j].s]+edges[j].wthenexit(false);
exit(true);
end;
</pre></div><div class="para">这样看似平凡的优化，会有怎样的效果呢？有研究表明，对于随机生成数据的平均情况，时间复杂度的估算公式为</div>
<div class="para">1.13|E| if |E|&lt;|V|</div>
<div class="para">0.95*|E|*lg|V| if |E|&gt;|V|</div>
<div class="para">优化后的算法在处理有负权回路的测试数据时，由于每次都会有边被松弛，所以relaxed每次都会被置为true，因而不可能提前终止外层循环。这对应了最坏情况，其时间复杂度仍旧为O(VE)。</div>
<div class="para">优化后的算法的时间复杂度已经和用二叉堆优化的Dijkstra算法相近了，而编码的复杂程度远比后者低。加之Bellman-Ford算法能处理各种边值权情况下的最短路径问题，因而还是非常优秀的。</div>
 </div> <link type="text/css" rel="stylesheet" href="http://baike.bdimg.com/static/lemma/syntaxhighlighter/styles/shCore_74699441.css"/><link type="text/css" rel="stylesheet" href="http://baike.bdimg.com/static/lemma/syntaxhighlighter/styles/shCoreDefault_611a030a.css"/><script type="text/javascript" src="http://baike.bdimg.com/static/lemma/syntaxhighlighter/scripts/XRegExp_73cf873a.js"></script><script type="text/javascript" src="http://baike.bdimg.com/static/lemma/syntaxhighlighter/scripts/shCore_b18e317f.js"></script><script type="text/javascript" src="/static/lemma/syntaxhighlighter/scripts/shBrushPython.js"></script><script type="text/javascript" src="/static/lemma/syntaxhighlighter/scripts/shBrushGroovy.js"></script><script type="text/javascript" src="/static/lemma/syntaxhighlighter/scripts/shBrushCpp.js"></script><script type="text/javascript" src="/static/lemma/syntaxhighlighter/scripts/shBrushPython.js"></script><script type="text/javascript" src="/static/lemma/syntaxhighlighter/scripts/shBrushPython.js"></script><style type="text/css">.syntaxhighlighter .toolbar{display:none!important}.syntaxhighlighter table td.code .container{padding-top:1px!important;padding-bottom:1px!important}.syntaxhighlighter table td.gutter .line,.syntaxhighlighter table td.code .line{background-color:#fff!important}.syntaxhighlighter a,.syntaxhighlighter div,.syntaxhighlighter code,.syntaxhighlighter table,.syntaxhighlighter table td,.syntaxhighlighter table tr,.syntaxhighlighter table tbody,.syntaxhighlighter table thead,.syntaxhighlighter table caption,.syntaxhighlighter textarea{line-height:1.3em!important}</style><script type="text/javascript">SyntaxHighlighter.all();</script><div class="clear"></div><div class="reinforce lazyload" lazy-path="/static/lemma/ui/view/reference/urlRmoveParentRefer.js"><dl id="viewRefer" class="viewRefer nslog-area log-set-param" data-nslog-type="2" log-set-param="ext_reference"> <dt><span class="z-ref-toggle" onclick="refToggle(this.parentNode.parentNode)"></span>参考资料</dt> <dd class="reference"><ul><li class="layout" id="reference-[1]-1481053-wrap">    <p class="refUrl"> <span class="ref-index"> 1．</span><a class="ref-top" name="refIndex_1_1481053" id="refIndex_1_1481053" title="向上跳转" href="javascript:void(0)">&nbsp;&nbsp;</a>  <span>（美）科曼等人</span>   <span>．算法导论（原书第二版）</span>    <span>：机械工业出版社</span>   <span>，2006</span>   <span>：362</span>  ．</p>  </li></ul> </dd></dl><script type="text/javascript">function refToggle(node) {var node = document.getElementById("viewRefer");var ulist = node.getElementsByTagName('li');if (baidu.dom.hasClass(node, 'collapse')) {baidu.removeClass(node, 'collapse');for (var i = 0; i < ulist.length; i ++) {ulist[i].style.display = "list-item";}} else {ulist.length >= 10 ? baidu.addClass(node, 'collapse') : baidu.setStyle(baidu('.z-ref-toggle')[0], 'visibility', 'hidden');for (var i = 0; i < ulist.length; i ++) {if (i >= 10) {ulist[i].style.display = "none";}}}}</script></div><div class="reinforce lazyload" lazy-path="/static/lemma/ui/view/reference/urlRmoveParentRefer.js"><style>#open-tag{padding-top:8px;padding-bottom:8px;line-height:30px;border-top:2px solid #ccc;border-bottom:0 solid #e6e6e6;overflow:hidden;position:relative;margin-bottom:35px}#open-tag dd{width:755px;*width:680px}.open-tag{background-color:#f5f5f5;border:1px solid #e6e6e6;margin-right:5px;padding:1px 4px;color:#666;white-space:nowrap;text-decoration:none;display:inline-block;margin-bottom:5px;line-height:16px;vertical-align:middle}.open-tag:hover{text-decoration:underline;color:#36c}.open-tag-title{font-weight:bold;float:left;padding-right:15px;height:20px;line-height:25px}.open-tag-collapse{background:url(/static/lemma/view/img/z-ref-toggle.png) 1px 8px no-repeat;position:absolute;right:0;top:0;width:10px;height:20px;margin:10px;cursor:pointer}.collapse .open-tag-collapse{background:url(/static/lemma/view/img/z-ref-toggle.png) -9px 8px no-repeat}</style><div id="open-tag" style="height: 22px;_height: 16px;"><div class="open-tag-title">词条标签：</div><dd id="open-tag-item"> <a href="/fenlei/%E7%AE%97%E6%B3%95" target="_blank" class="open-tag  nslog:7336">算法</a><a href="/fenlei/%E5%9B%BE%E8%AE%BA" target="_blank" class="open-tag open-tag-mr7 nslog:7336">图论</a>    <a class="taglist" href="/taglist?tag=%D7%EE%B6%CC%C2%B7%BE%B6&amp;tagfromview" target="_blank">最短路径</a>  </dd><div class="open-tag-collapse" id="open-tag-collapse" onclick="openTagToggle(this.parentNode)"></div></div><div class="clear"></div><script>function openTagToggle(node) {if(baidu(node).hasClass("collapse")) {baidu(node).removeClass("collapse");baidu("#open-tag").css("height", (baidu.browser.ie<8)?'16px':'22px');}else {baidu(node).addClass("collapse");baidu("#open-tag").css("height", baidu("#open-tag-item").css("height"));}}F.use("/static/common/lib/tangram/base/base.js", function(baidu){if(parseInt(baidu("#open-tag-item").css("height")) <= 30) {baidu('#open-tag-collapse').hide();}});</script></div></div></div></div></div><div id="side" class="col-sub"><style>.basicInformation{box-shadow:0 0 5px #ddd;overflow:hidden;margin-bottom:10px;border-bottom:1px solid #ddd}#side-info{margin-bottom:0;border-bottom:0}.side-box{background-color:#f9f9f9;border:1px solid #ddd;padding-bottom:15px;margin-bottom:10px;padding:0 14px 14px}.side-box .sideLine{height:1px;background:#ddd;margin:15px 0 0 0;overflow:hidden}.side-box-extend{border:1px solid #e6e6e6;background:#fcfcfc}#card-img{position:relative;left:0;border:1px solid #ddd;background:white}#card-img .lemmapic-mask{position:absolute;display:none}.cardImgTitle{display:block;padding:8px 15px;border-left:1px solid #ddd;border-right:1px solid #ddd;color:#333;font-size:16px;font-family:"微软雅黑";_line-height:21px}.cardImgTitle span{background:url(/static/lemma/view3/img/icon-view_5015d4f8.png) -78px -213px no-repeat;_background:url(/static/lemma/view3/img/icon-view_4b787901.gif) -78px -213px no-repeat;padding-left:31px;zoom:1}a.cardImgTitle:visited{color:#333}a.cardImgTitle:hover{color:#136ec2}#card-img-tip{width:30px;height:30px;position:absolute;right:8px;bottom:8px;background:transparent url(/static/lemma/view/img/card-img-tip.png) 0 0 no-repeat;opacity:.45}#card-img a:hover #card-img-tip{opacity:.5}#card-img a{display:block;position:relative;overflow:hidden}#info-list .gray-color{color:#555;font-weight:bold;float:left}#info-list .card-bfc{overflow:hidden;zoom:1;color:#444}#info-list dd{line-height:22px}.side-list-item{line-height:22px;color:#555}#side .city-nav{display:block;width:270px;height:125px;padding-bottom:10px}</style><div class="side-box side-box-extend"><div class="side-title side-title-extend">词条统计</div><div class="side-list-item">浏览次数：<span id="viewPV"></span>次</div><div class="side-list-item">编辑次数：29次 <a href="/historylist/Bellman-Ford%25E7%25AE%2597%25E6%25B3%2595" class="nslog:1021" target="_blank">历史版本</a></div><div class="side-list-item">最近更新：<span id="lastModifyTime">2014-10-29</span></div><div class="side-list-item">创建者：<span class="nslog:1022"><a title='查看此用户资料' class='usercard' userName='zzz_why'  target='_blank' href='http://www.baidu.com/p/zzz_why?from=wk'>zzz_why</a></span></div></div><div id="side-auth"></div><div style="display:none" id="bkDynamic"><dl><dd class="task nslog-area" data-nslog-type="1023" id="task" style="display:none;"></dd><dd class="notice nslog-area" data-nslog-type="1024" id="notice"></dd></dl></div><style>#bkDynamic{padding-left:14px;padding-right:14px;margin-top:10px;margin-bottom:10px;padding:12px 15px;border:1px solid #e6e6e6;background:#fcfcfc}#bkDynamic .sidetitle2{color:#555;font-size:14px;font-weight:bold;margin-bottom:6px}#bkDynamic .BKdynamic-img{border-bottom:1px solid #e6e6e6;padding-bottom:10px}#bkDynamic .notice dd{font-size:12px;background:url(http://img.baidu.com/img/baike/bgs3.png) no-repeat 2px -99px;padding-left:12px;line-height:22px}#bkDynamic .notice dd a:link,#bkDynamic .notice dd a:visited,#bkDynamic .notice dd:hover{color:#666}#bkDynamic .notice dd:hover{text-decoration:underline}</style> <div id="mabox" style="display:none;width: 242px;padding: 10px 13px;border: 1px solid #e6e6e6;margin-top: 10px; overflow:hidden;zoom:1;">  <div id="box2-inner"> </div> <script type="text/javascript">F.use(["/static/common/ui/nslog/nslog.js", "/static/lemma/ui/view/maad3/maad3.js", "/static/common/ui/jquery/jquery.js"], function(nslog, e, $) {$.ajax({url: "/cms/config/lemma/deny_pheonix_lemma_list.json",dataType: "JSON",success: function(res) {var denyList = res.deny || [];if ($.inArray("Bellman-Ford算法", denyList) === -1) {nslog.set("lemmaid", "1481053");nslog.set("sublemmaid", "1481053");e.init("Bellman-Ford%CB%E3%B7%A8", "1089090");} else {$("#mabox").remove();} },error: function() {nslog.set("lemmaid", "1481053");nslog.set("sublemmaid", "1481053");e.init("Bellman-Ford%CB%E3%B7%A8", "1089090");}})});</script> </div><div id="side-catalog-showtag"></div><script>var baikeViewInfo=window.baikeViewInfo?window.baikeViewInfo:{};baikeViewInfo.expIndex=0;baikeViewInfo.cataList=baikeViewInfo.cataList?baikeViewInfo.cataList:[];baikeViewInfo.cataList = baikeViewInfo.cataList.concat([{"title":"\u7b97\u6cd5\u4ecb\u7ecd","charnum":386,"screennum":0,"level":1,"index":1,"modules":[],"display":true,"ele":"1"},{"title":"\u9002\u7528\u6761\u4ef6&amp;\u8303\u56f4","charnum":133,"screennum":0,"level":1,"index":2,"modules":[],"display":true,"ele":"2"},{"title":"\u7b97\u6cd5\u63cf\u8ff0","charnum":290,"screennum":0,"level":1,"index":3,"modules":[],"display":true,"ele":"3"},{"title":"\u63cf\u8ff0\u6027\u8bc1\u660e","charnum":855,"screennum":1,"level":1,"index":4,"modules":[],"display":true,"ele":"4"},{"title":"\u4f2a\u4ee3\u7801","charnum":595,"screennum":0,"level":1,"index":5,"modules":[],"display":true,"ele":"5"},{"title":"PASCAL","charnum":114,"screennum":0,"level":2,"index":"5_1","modules":[],"display":true,"ele":"5_1"},{"title":"C&amp;C++","charnum":388,"screennum":0,"level":2,"index":"5_2","modules":[],"display":true,"ele":"5_2"},{"title":"\u65f6\u7a7a\u590d\u6742\u5ea6","charnum":70,"screennum":0,"level":2,"index":"5_3","modules":[],"display":true,"ele":"5_3"},{"title":"\u53c2\u8003\u4ee3\u7801","charnum":2142,"screennum":2,"level":1,"index":6,"modules":[],"display":true,"ele":"6"},{"title":"PASCAL","charnum":1107,"screennum":1,"level":2,"index":"6_1","modules":[],"display":true,"ele":"6_1"},{"title":"Matlab","charnum":433,"screennum":0,"level":2,"index":"6_2","modules":[],"display":true,"ele":"6_2"},{"title":"C","charnum":589,"screennum":0,"level":2,"index":"6_3","modules":[],"display":true,"ele":"6_3"},{"title":"\u5f15\u7533\u5185\u5bb9","charnum":92,"screennum":0,"level":1,"index":7,"modules":[],"display":true,"ele":"7"},{"title":"\u7b97\u6cd5\u6d41\u7a0b","charnum":1710,"screennum":2,"level":1,"index":8,"modules":[],"display":true,"ele":"8"},{"title":"\u7b97\u6cd5\u4ee3\u7801","charnum":220,"screennum":0,"level":2,"index":"8_1","modules":[],"display":true,"ele":"8_1"},{"title":"\u7b97\u6cd5\u7684\u4f18\u5316","charnum":1344,"screennum":1,"level":2,"index":"8_2","modules":[],"display":true,"ele":"8_2"}]);</script></div></div><div class="lemma-guide"><div class="guide-wrapper"><div class="guide-newer block"><div class="guide-title">新手上路</div><div class="guide-link"><p><a target="_blank" class="left" href="http://baike.baidu.com/uc/task">成长任务</a><a target="_blank" href="http://baike.baidu.com/cms/s/help/index.html#main01">编辑入门</a></p><p><a target="_blank" class="left" href="http://baike.baidu.com/cms/s/help/index.html#main06">编辑规则</a><a target="_blank" href="http://baike.baidu.com/cms/s/help/index.html#main05">百科术语</a></p></div></div><div class="guide-question block"><div class="guide-title">我有疑问</div><div class="guide-link"><p><a target="_blank" class="left" href="http://baike.baidu.com/cms/s/help/index.html#main04">常见问题</a><a target="_blank" href="http://zhidao.baidu.com/new?ie=GBK">我要提问</a></p><p><a target="_blank" class="left" href="http://tieba.baidu.com/f?ie=utf-8&fr=bks0000&kw=%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91">参加讨论</a><a target="_blank" href="http://baike.baidu.com/feedback">意见反馈</a></p></div></div><div class="guide-suggestion block"><div class="guide-title">投诉建议</div><div class="guide-link"><p><a target="_blank" class="left" href="http://tousu.baidu.com/baike#1">举报不良信息</a><a target="_blank" href="http://tousu.baidu.com/baike#2">未通过词条申诉</a></p><p><a target="_blank" class="left" href="http://tousu.baidu.com/baike#4">投诉侵权信息</a><a target="_blank" href="http://tousu.baidu.com/baike#3">封禁查询与解封</a></p></div></div></div></div></div></div><div id="refTip" class="refTip-box"><table><tr><td valign="middle" class="refTip-bg"><div class="refTip-content" id="refTip-content"></div></td><td class="refTip-text" valign="middle">参考资料</td></tr></table><div class="refTip-triangle"></div></div><div id="topToolbar" style="display: none;"><div class="container"><div class="toplogin"><a href="javascript:;" class="nslog:88" onclick="userlogin()">登录</a></div><div class="container2"><a class="toplogo" href="http://baike.baidu.com" title="百度百科" href="_blank"></a><div class="topsearch"><div class="topsubmit" title="进入词条"></div><iframe class="topiframe"></iframe> <form action="/search/word" method="get" name="f1" target="_self" onsubmit="nslog(location.href, 9121);" id="ftop"><input type="text" id="topword" class="toptextinput" name="word" value="Bellman-Ford算法"/><input id="search-enc" name="enc" type="hidden" value="utf8"><input id="sw1" name="pic" type="hidden" value="1"><input name="sug" type="hidden" value="1"></form></div><div class="topbtns"><a class="topbtn topedit" href="javascript: void(0);" ></a><div class="topbtn topshoucang topshoucangbtn"><div class="topshoucangtip">查看<a href="/uc/favolemma" target="_blank">我的收藏</a></div></div><div class="topbtn topzan topzanbtn"></div></div></div></div></div><div id="sideToolbar" style="display: none;"><div id="sideCatalog" class="sideCatalogBg" style="visibility: hidden;"><div id="sideCatalog-sidebar"><div class="sideCatalog-sidebar-top"></div><div class="sideCatalog-sidebar-bottom"></div></div><div id="sideCatalog-updown" style="visibility: hidden;"><div id="sideCatalog-up" class="sideCatalog-up-disable" title="向上翻页"></div><div id="sideCatalog-down" class="sideCatalog-down-enable" title="向下翻页"></div></div><div id="sideCatalog-catalog"><dl style="width:175px;zoom:1"><dd class="sideCatalog-item1" id="sideToolbar-item-0-1"><span class="sideCatalog-index1">1</span><a href="#1" class="nslog:1026" title="算法介绍" onclick="return false;">算法介绍</a><span class="sideCatalog-dot"></span></dd><dd class="sideCatalog-item1" id="sideToolbar-item-0-2"><span class="sideCatalog-index1">2</span><a href="#2" class="nslog:1026" title="适用条件&amp;范围" onclick="return false;">适用条件&amp;范围</a><span class="sideCatalog-dot"></span></dd><dd class="sideCatalog-item1" id="sideToolbar-item-0-3"><span class="sideCatalog-index1">3</span><a href="#3" class="nslog:1026" title="算法描述" onclick="return false;">算法描述</a><span class="sideCatalog-dot"></span></dd><dd class="sideCatalog-item1" id="sideToolbar-item-0-4"><span class="sideCatalog-index1">4</span><a href="#4" class="nslog:1026" title="描述性证明" onclick="return false;">描述性证明</a><span class="sideCatalog-dot"></span></dd><dd class="sideCatalog-item1" id="sideToolbar-item-0-5"><span class="sideCatalog-index1">5</span><a href="#5" class="nslog:1026" title="伪代码" onclick="return false;">伪代码</a><span class="sideCatalog-dot"></span></dd><dd class="sideCatalog-item2" id="sideToolbar-item-0-5_1"><span class="sideCatalog-index2">5.1</span><a href="#5_1" class="nslog:1026" title="PASCAL" onclick="return false;">PASCAL</a><span class="sideCatalog-dot"></span></dd><dd class="sideCatalog-item2" id="sideToolbar-item-0-5_2"><span class="sideCatalog-index2">5.2</span><a href="#5_2" class="nslog:1026" title="C&amp;C++" onclick="return false;">C&amp;C++</a><span class="sideCatalog-dot"></span></dd><dd class="sideCatalog-item2" id="sideToolbar-item-0-5_3"><span class="sideCatalog-index2">5.3</span><a href="#5_3" class="nslog:1026" title="时空复杂度" onclick="return false;">时空复杂度</a><span class="sideCatalog-dot"></span></dd><dd class="sideCatalog-item1" id="sideToolbar-item-0-6"><span class="sideCatalog-index1">6</span><a href="#6" class="nslog:1026" title="参考代码" onclick="return false;">参考代码</a><span class="sideCatalog-dot"></span></dd><dd class="sideCatalog-item2" id="sideToolbar-item-0-6_1"><span class="sideCatalog-index2">6.1</span><a href="#6_1" class="nslog:1026" title="PASCAL" onclick="return false;">PASCAL</a><span class="sideCatalog-dot"></span></dd><dd class="sideCatalog-item2" id="sideToolbar-item-0-6_2"><span class="sideCatalog-index2">6.2</span><a href="#6_2" class="nslog:1026" title="Matlab" onclick="return false;">Matlab</a><span class="sideCatalog-dot"></span></dd><dd class="sideCatalog-item2" id="sideToolbar-item-0-6_3"><span class="sideCatalog-index2">6.3</span><a href="#6_3" class="nslog:1026" title="C" onclick="return false;">C</a><span class="sideCatalog-dot"></span></dd><dd class="sideCatalog-item1" id="sideToolbar-item-0-7"><span class="sideCatalog-index1">7</span><a href="#7" class="nslog:1026" title="引申内容" onclick="return false;">引申内容</a><span class="sideCatalog-dot"></span></dd><dd class="sideCatalog-item1" id="sideToolbar-item-0-8"><span class="sideCatalog-index1">8</span><a href="#8" class="nslog:1026" title="算法流程" onclick="return false;">算法流程</a><span class="sideCatalog-dot"></span></dd><dd class="sideCatalog-item2" id="sideToolbar-item-0-8_1"><span class="sideCatalog-index2">8.1</span><a href="#8_1" class="nslog:1026" title="算法代码" onclick="return false;">算法代码</a><span class="sideCatalog-dot"></span></dd><dd class="sideCatalog-item2" id="sideToolbar-item-0-8_2"><span class="sideCatalog-index2">8.2</span><a href="#8_2" class="nslog:1026" title="算法的优化" onclick="return false;">算法的优化</a><span class="sideCatalog-dot"></span></dd></dl></div></div><a id="sideCatalogBtn" href="javascript:void(0);" style="visibility: hidden;"></a><a id="sideToolbar-up" href="javascript:void(0)" style="visibility: hidden;"></a></div><div id="bdshareside"><div id="bdshare" log-set-param="view_shareside" class="bdshare_t log-set-param bds_tools get-codes-bdshare bk_share" data="{'url':'http://baike.baidu.com/view/1481053.htm','text':'【Bellman-Ford算法_百度百科】Bellman-ford算法是求含负权图的单源最短路径算法，效率很低，但代码很容易写。即进行不停地松弛（原文是这么写的，为什么要叫松弛，争议很大），每次松弛把每条边都更新一下，若n-1次松弛后还能更新，则说明图中有负环，无法得出结果，否则就成功完成。Bellman-ford算法有一个小优化：每次松弛先.....（分享自@百度百科）','pic':''}"><div class="shareLogo">分享</div><div class="shareIcon"><a class="bds_qzone" title="分享到QQ空间"></a><a class="bds_tsina" title="分享到新浪微博"></a><a class="bds_tqq" title="分享到腾讯微博"></a></div><span class="bds_more"></span></div></div><script>F.use(["/static/widget/lemma/picture_dialog/picture_dialog.js"],function(PDialog){PDialog.sendPageLog();PDialog.initializeAlbumLink();PDialog.initializePictureLink();});</script><div id="adLayerSideWrap" > <a id="adLayerSide" style="display:none" class="ad-layer-side" href="javascript:;" target="_blank"> <em class="close"></em>  </a>   </div><div id="footer" data-nslog-type="1001" class="nslog-area anchor">&copy; 2014 Baidu <a target="_blank" href="http://www.baidu.com/duty/">使用百度前必读</a>&nbsp;|&nbsp;<a target="_blank" href="http://www.baidu.com/search/baike_help.html#百科协议">百科协议</a>&nbsp;|&nbsp;<a target="_blank" href="http://baike.baidu.com/hezuo/">百度百科合作平台</a></div><script>F.use("/static/common/lib/tangram/base/base.js", function(baidu){baidu.each = baidu.forEach;baidu.array.each = baidu.forEach;window.baidu = baidu;});</script><img src="http://c.baidu.com/c.gif?t=7&amp;q=&amp;p=0" style="display:none;"/><input id="titleVal" type="hidden" value="Bellman-Ford算法" /><script type="text/javascript">F.use("/static/common/ui/nslog/nslog.js",function(nslog){nslog.set("page","view");nslog.set("lemmaid","1481053");nslog.set("ispolysemy","1");});F.use("/static/common/lib/tangram/base/base.js", function(baidu){baidu.each = baidu.forEach;baidu.array.each = baidu.forEach;window.baidu = baidu;});baikeInfo.panoramaImage = "0";F.use(["/static/lemma/ui/view/controller3/controller3.js","/static/common/ui/util/util.js","/static/common/lib/tangram/ui/Base/Base.js","/static/common/ui/dialog/dialog.js","/static/common/ui/nslog/nslog.js"],function(controller,util,uiBase,dialog,nslog){window.Dialog = dialog;F.use("/static/common/ui/fillusername/fillusername.js");F.use("/static/common/ui/userlogin/userlogin.js", function(e){e.check(function(){if(typeof PDC != 'undefined'){PDC.init({is_login : (window.curUser==0?false:true),sample : 0.12,product_id : 103,page_id : 1,special_pages:[{id:109,sample:0.1}]});}});});baidu.page.loadJsFile("http://img.baidu.com/hunter/baike.js?st=" + parseInt(new Date()/864e5));nslog.init();baidu.dom.ready(function(){if(!!window.rsInsertData && window.rsInsertData.length>0){F.use('/static/common/lib/tangram/fx/fx.js',function(){baidu.page.loadCssFile( "/guanxi/static/css/lemma_insert.css" );baidu.sio.callByBrowser( "/guanxi/static/js/lemma_insert.js?t=131421",null,{charset:"utf-8"} );});}});baidu("div[data-rendered]").click(function(){nslog(location.href, 9071, {stype: "click", lemmaId: baikeViewInfo.id});});if(baidu("div[data-rendered]")[0]) {nslog(location.href, 9071, {stype: "pv", lemmaId: baikeViewInfo.id});}});</script><script type="text/javascript">F.use("/static/common/ui/jquery/jquery.js",function($){$.ajax({url:'/cms/global/cms_lemma_config.js?r='+Math.random(),dataType:"jsonp"});});</script><script>(function(){PDC.extend({_navTiming:window.performance&&performance.timing,ready:(function(callback){var readyBound=false,readyList=[],DOMContentLoaded,isReady=false;if(document.addEventListener){DOMContentLoaded=function(){document.removeEventListener("DOMContentLoaded",DOMContentLoaded,false);ready()}}else{if(document.attachEvent){DOMContentLoaded=function(){if(document.readyState==="complete"){document.detachEvent("onreadystatechange",DOMContentLoaded);ready()}}}}function ready(){if(!isReady){isReady=true;for(var i=0,j=readyList.length;i<j;i++){readyList[i]()}}}function doScrollCheck(){try{document.documentElement.doScroll("left")}catch(e){setTimeout(doScrollCheck,1);return}ready()}function bindReady(){if(readyBound){return}readyBound=true;if(document.addEventListener){document.addEventListener("DOMContentLoaded",DOMContentLoaded,false);window.addEventListener("load",ready,false)}else{if(document.attachEvent){document.attachEvent("onreadystatechange",DOMContentLoaded);window.attachEvent("onload",ready);var toplevel=false;try{toplevel=window.frameElement==null}catch(e){}if(document.documentElement.doScroll&&toplevel){doScrollCheck()}}}}bindReady();return function(callback){isReady?callback():readyList.push(callback)}})(),Cookie:{set:function(name,value,max_age){max_age=max_age||10;var exp=new Date();exp.setTime(new Date().getTime()+max_age*1000);document.cookie=name+"="+escape(value)+";path=/;expires="+exp.toGMTString()},get:function(name){var arr=document.cookie.match(new RegExp("(^| )"+name+"=([^;]*)(;|$)"));if(arr!=null){return unescape(arr[2])}return null},remove:function(name){this.set(name,"",-1)}},_is_sample:function(ratio){if(!PDC._random){PDC._random=Math.random()}return PDC._random<=ratio},_load_analyzer:function(){var special_pages=this._opt.special_pages||[];var radios=[this._opt.sample];for(var i=0;i<special_pages.length;i++){radios.push(special_pages[i]["sample"])}var radio=Math.max.apply(null,radios);if(PDC._is_sample(radio)==false){return}PDC._analyzer.loaded=true;PDC._load_js(PDC._analyzer.url,function(){var callbacks=PDC._analyzer.callbacks;for(var i=0,l=callbacks.length;i<l;i++){callbacks[i]()}})},_load_js:function(url,callback){var script=document.createElement("script");script.setAttribute("type","text/javascript");script.setAttribute("src",url);script.onload=script.onreadystatechange=function(){if(!this.readyState||this.readyState=="loaded"||this.readyState=="complete"){script.onload=script.onreadystatechange=null;if(typeof callback==="function"){callback(url,true)}}};script.onerror=function(e){if(typeof callback==="function"){callback(url,false)}};document.getElementsByTagName("head")[0].appendChild(script)},send:function(){if(PDC._analyzer.loaded==true){WPO_PDA.send()}else{PDC._load_analyzer();PDC._analyzer.callbacks.push(function(){WPO_PDA.send()})}}},PDC);!function(){var Cookie=PDC.Cookie,jt=Cookie.get("PMS_JT"),isset=false;if(jt){Cookie.remove("PMS_JT");jt=eval(jt);if(!jt.r||document.referrer.replace(/#.*/,"")==jt.r){(PDC._render_start-jt.s)>100&&PDC.mark("wt",(PDC._render_start-jt.s))}}function findParent(tagname,el){var flag=0;if((el.nodeName||el.tagName).toLowerCase()===tagname.toLowerCase()){return el}while(el=el.parentNode){flag++;if((el.nodeName||el.tagName).toLowerCase()===tagname.toLowerCase()){return el}if(flag>=4){return null}}return null}function clickHandle(e){var e=e||window.event;var target=e.target||e.srcElement;var from=findParent("a",target);if(from){var url=from.getAttribute("href");if(!/^#|javascript:/.test(url)){Cookie.set("PMS_JT",'({"s":'+(+new Date)+',"r":"'+document.URL.replace(/#.*/,"")+'"})');isset=true}}}if(document.attachEvent){document.attachEvent("onclick",clickHandle)}else{document.addEventListener("click",clickHandle,false)}}();PDC.ready(function(){PDC.mark("drt")});if(document.attachEvent){window.attachEvent("onload",function(){PDC.mark("lt")},false)}else{window.addEventListener("load",function(){PDC.mark("let");PDC._setFS&&PDC._setFS();PDC._opt.ready!==false&&PDC._load_analyzer()})}})();</script><!--TRACE：10-23-253-153@2014-11-24 17:11:45--></body></html>