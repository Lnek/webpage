<HTML>
<HEAD>
<TITLE>gprof(1)</TITLE>
<META NAME="ROBOTS" CONTENT="NOFOLLOW">
<META NAME="GENERATOR" CONTENT="Created from RSML source by refht">
<SCRIPT LANGUAGE="javascript1.1">
<!--
self.window.focus();
// -->
</SCRIPT>
</HEAD>
<BODY BGCOLOR="#CCCCCC"><A NAME="page_top"></A>

<CENTER><TABLE CELLSPACING=0 CELLPADDING=4 BORDER=2>
<TR>
	<TD WIDTH="33%"><TABLE CELLSPACING=0 CELLPADDING=4 BORDER=0 WIDTH="100%">
	<TR ALIGN="Center">
		<TD><A HREF="INDEX.HTM"><IMG SRC="../TOC.GIF" WIDTH="56" HEIGHT="32" BORDER=0 ALT="Index"></A></TD>
		<TD NOWRAP>Index for<BR>Section 1</TD>
	</TR>
	</TABLE></TD>
	<TD WIDTH="33%"><TABLE CELLSPACING=0 CELLPADDING=4 BORDER=0 WIDTH="100%">
	<TR ALIGN="Center">
		<TD><A HREF="../INDEXES/INDEX_G.HTM"><IMG SRC="../INDEX.GIF" WIDTH="56" HEIGHT="32" BORDER=0 ALT="Index"></A></TD>
		<TD NOWRAP>Alphabetical<BR>listing for G</TD>
	</TR>
	</TABLE></TD>
	<TD WIDTH="33%"><TABLE CELLSPACING=0 CELLPADDING=4 BORDER=0 WIDTH="100%">
	<TR ALIGN="Center">
		<TD><A HREF="#page_bottom"><IMG SRC="../FF.GIF" WIDTH="56" HEIGHT="32" BORDER=0 ALT="Bottom of page"></A></TD>
		<TD NOWRAP>Bottom of<BR>page</TD>
	</TR>
	</TABLE></TD>
</TR>
</TABLE></CENTER>

<P>

<PRE>
<H2 ALIGN=Right>gprof(1)</H2>
<H3>NAME</H3>
  <STRONG>gprof</STRONG> - Displays call-graph profile data

<H3>SYNOPSIS</H3>
  <STRONG>gprof</STRONG> [<VAR>options</VAR>] <VAR>prog</VAR>_<VAR>name</VAR> [<VAR>profile</VAR>_<VAR>file</VAR>...]

<H3>OPERANDS</H3>
  <VAR>prog</VAR>_<VAR>name</VAR>
      Name of the program executable whose profile is to be displayed. For a
      program compiled for PC-sampling with the <STRONG>-pg</STRONG> option or instrumented
      for PC-sampling with <STRONG>hiprof</STRONG>, specify the name of the executable that
      was run to produce the profile file specified. For other kinds of
      <STRONG>hiprof</STRONG> profiling, specify the uninstrumented executable that was the
      input to <STRONG>hiprof</STRONG>. The program should also be compiled with the <STRONG>-g1</STRONG>, <STRONG>-g2</STRONG>,
      or <STRONG>-g3</STRONG> option to obtain more complete profiling information.  If the
      default symbol table level (<STRONG>-g0</STRONG>) has been used, line number
      information, static procedure names, and file names are unavailable to
      the profiling code.

  <VAR>profile</VAR>_<VAR>file</VAR>
      Name of the call graph profile file.  This is either a PC sampling
      profile file or an instrumented event-counting profile file. By
      default, <STRONG>gprof</STRONG> looks for the profile file named <STRONG>gmon.out</STRONG> (see the
      description of the <STRONG>PROFDIR</STRONG> environment variable). If more than one
      <STRONG>profile_file</STRONG> is specified, <STRONG>gprof</STRONG> output shows the sum of the profile
      information in the specified profile files.

<H3>OPTIONS</H3>
  For each <STRONG>gprof</STRONG> option, you need type only enough of the name to distinguish
  it from the other options.

  <STRONG>-a</STRONG>  Suppresses the printing of statically declared functions. If this
      option is given, all relevant information about the static function
      (for example, time samples, calls to other functions, calls from other
      functions) belongs to the function loaded just before the static
      function in the <STRONG>a.out</STRONG> file.

  <STRONG>-all</STRONG>
      Causes the profiles for all shared libraries (if any) described in the
      data file(s) to be displayed, in addition to the profile for the
      executable.

  <STRONG>-asm</STRONG>
      Profiles each instruction within selected procedures. (Use this option
      only with <STRONG>hiprof</STRONG>'s PC-sampling profile data, and note that the first
      few instructions of each instrumented procedure includes the code that
      counted calls to that procedure.)

  <STRONG>-b</STRONG>  Suppresses the printing of a description of each field in the profile.

  <STRONG>-bounded</STRONG>
      Limits those functions for which a call-graph entry is printed to those
      functions specified in the <STRONG>-f</STRONG> or <STRONG>-F</STRONG> options.  By default, call graphs
      are printed for all procedures in the tree of procedures called by the
      selected procedures.

  <STRONG>-e</STRONG> <VAR>routine</VAR>
      Suppresses the printing of the graph profile entry for <VAR>routine</VAR> and all
      its descendants (unless they have other ancestors that are not
      suppressed). More than one <STRONG>-e</STRONG> option may be given.  Only one <VAR>routine</VAR>
      may be given with each <STRONG>-e</STRONG> option.

  <STRONG>-E</STRONG> <VAR>routine</VAR>
      Suppresses the printing of the graph profile entry for <VAR>routine</VAR> and its
      descendants (same as <STRONG>-e</STRONG>), and also excludes the time spent in <VAR>routine</VAR>
      and its descendants from the total and percentage time computations.
      The library routines used to collect the profile data are excluded by
      default (except for certain common <STRONG>libpthread</STRONG> routines).

  <STRONG>-excobj</STRONG> <VAR>object</VAR>_<VAR>file</VAR>_<VAR>name</VAR>
      Causes the profile for the named executable or shared library not to be
      printed. You can use this option multiple times in a single <STRONG>gprof</STRONG>
      command.

  <STRONG>-f</STRONG> <VAR>routine</VAR>
      Prints the graph profile entry of only the specified <VAR>routine</VAR> and its
      descendants.  More than one <STRONG>-f</STRONG> option may be given. Only one <VAR>routine</VAR>
      may be given with each <STRONG>-f</STRONG> option.	 The <STRONG>-f</STRONG> option overrides the <STRONG>-e</STRONG>
      option.

  <STRONG>-F</STRONG> <VAR>routine</VAR>
      Prints the graph profile entry of only <VAR>routine</VAR> and its descendants
      (same as <STRONG>-f</STRONG>), and also uses only the times of the printed routines in
      total time and percentage computations.  More than one <STRONG>-F</STRONG> option may be
      given.  Only one <VAR>routine</VAR> may be given with each <STRONG>-F</STRONG> option.  The <STRONG>-F</STRONG>
      option overrides the <STRONG>-E</STRONG> option.

  <STRONG>-graph</STRONG>
      Profiles procedures as an indexed call graph (default).

  <STRONG>-heavy</STRONG>
      Profiles source lines, listing the most heavily used first. (Use this
      option only with <STRONG>hiprof</STRONG>'s PC-sampling profile data.)

  <STRONG>-incobj</STRONG> <VAR>object</VAR>_<VAR>file</VAR>_<VAR>name</VAR>
      Causes the profile for the named shared library to be printed, in
      addition to the profile for the executable. You can use this option
      multiple times in a single <STRONG>gprof</STRONG> command.

  <STRONG>-L</STRONG><VAR>dir</VAR>
      Changes the library directory search order for shared object libraries
      so that <STRONG>gprof</STRONG> looks for them in <VAR>dir</VAR> before the library recorded in
      <VAR>profile</VAR>_<VAR>file</VAR> and the default library directories.	 You can specify
      multiple <STRONG>-L</STRONG><VAR>dir</VAR> switches to specify several directory names.

  <STRONG>-L</STRONG>  Change the library directory search order for shared object libraries
      so that <STRONG>gprof</STRONG> <VAR>never</VAR> looks for them in the default library directories.
      Use this option when the default library directories should not be
      searched and only the directories specified by <STRONG>-L</STRONG><VAR>dir</VAR> are to be
      searched.

  <STRONG>-lines</STRONG>
      Profiles source lines, in order within selected procedures. (Use this
      option only with <STRONG>hiprof</STRONG>'s PC-sampling profile data.)

  <STRONG>-merge</STRONG> <VAR>filename</VAR>
      Produces a profile file with the specified file name, which represents
      the sum of the profile information contained in all the specified
      profile files. Same as <STRONG>-s</STRONG>, except that <STRONG>-merge</STRONG> lets you specify the name
      of the resulting profile file (rather than using the default file name,
      <STRONG>gmon.sum</STRONG>). Also lets you use <STRONG>gmon.sum</STRONG> as an input file. Regular profile
      reports are not printed when <STRONG>-merge</STRONG> is specified.

  <STRONG>-numbers</STRONG>
      Prints each procedure's object file name, source file name, and
      starting line number if source file information is available from the
      object file.  Use this switch when the profiled program contains
      multiple static procedures with the same name.  In such cases, the
      source and object file names uniquely identify each procedure.

  <STRONG>-procedures</STRONG>
      Profiles procedures, listing the most heavily used first (default).

  <STRONG>-s</STRONG>  Produces a profile file, <STRONG>gmon.sum</STRONG>, which represents the sum of the
      profile information in all the specified profile files. This summary
      profile file may be given to subsequent executions of <STRONG>gprof</STRONG> (probably
      also with a <STRONG>-s</STRONG>) to accumulate profile data across several runs of an
      <STRONG>a.out</STRONG> file.

  <STRONG>-scaled</STRONG>
      Scales all results into scientific notation so that numbers that are
      either very small or very large can be printed within the column
      boundaries. Larger numbers lose very little precision to rounding off,
      whereas smaller numbers gain precision.

  <STRONG>-totals</STRONG>
      Prints cumulative statistics for the entire object file instead of for
      each procedure in the object.

  <STRONG>-version</STRONG>
      Prints the tool's version number.

  <STRONG>-z</STRONG>  Displays routines that have zero usage, as indicated by call counts and
      accumulated time.

<H3>DESCRIPTION</H3>
  The <STRONG>gprof</STRONG> command produces an execution profile of programs. The effect of
  called routines is incorporated into the profile of each caller. Profile
  data of three kinds is accepted by <STRONG>gprof</STRONG>:

    <STRONG><FONT SIZE="+3">&#183;</FONT></STRONG>  PC-sampling profiles of CPU time produced by programs compiled with
       the <STRONG>-pg</STRONG> option of the <STRONG>cc</STRONG> command

    <STRONG><FONT SIZE="+3">&#183;</FONT></STRONG>  PC-sampling profiles of CPU time produced by programs instrumented by
       <STRONG>hiprof</STRONG>.

    <STRONG><FONT SIZE="+3">&#183;</FONT></STRONG>  Event-counting profiles of CPU time or page faults produced by
       programs modified by <STRONG>hiprof</STRONG>.

  PC-Sampling with cc -pg

  The profile data is taken from one or more specified call graph
  <VAR>profile</VAR>_<VAR>file</VAR>s (<STRONG>gmon.out</STRONG> by default), created by programs compiled with the
  <STRONG>-pg</STRONG> option with the <STRONG>cc</STRONG> driver command. The <STRONG>-pg</STRONG> option also links in
  versions of the <STRONG>libc</STRONG> and <STRONG>libm</STRONG> library routines compiled for profiling when
  your program is linked by using the <STRONG>-non_shared</STRONG> option with the <STRONG>cc</STRONG> command.

  The <STRONG>gprof</STRONG> command fully profiles only the non-shared or call-shared
  executable.

  To produce call graph data, follow these steps:

   <STRONG>1.</STRONG>  Compile your program with the <STRONG>-pg</STRONG> option to the <STRONG>cc</STRONG> command.

   <STRONG>2.</STRONG>  Execute the program to produce a data file.

   <STRONG>3.</STRONG>  Run <STRONG>gprof</STRONG> on the data file.

  The default "<STRONG>-graph</STRONG>" listing shows the functions sorted according to the
  time they represent, including the time of their call graph descendants.
  Below each function entry is shown its (direct) call graph children, and
  how their times are propagated to this function. A similar display above
  the function estimates how this function's time and the time of its
  descendants may be propagated to its (direct) call graph parents, assuming
  that each call has the same cost.	  Note that some procedures occur
  both as children of other procedures and as spontaneous procedures. A
  procedure with one or more parents is never listed separately in the call
  graph display, even if sometimes it is spontaneously generated.  An index
  of the procedures is also printed.

  The default "<STRONG>-procedures</STRONG>" listing shows a flat profile similar to that
  provided by <STRONG>prof</STRONG>. This listing gives the total execution times and call
  counts for each of the functions in the program, sorted by decreasing time.

  To obtain call graph data on libraries, link your program by using the
  <STRONG>-non_shared</STRONG> option with the <STRONG>cc</STRONG> command. To disable profiling of a
  particular library, use the <STRONG>-no_pg</STRONG> option when linking. For example, to
  enable call graph profiling of your executable program, including library
  routines, and then disable call graph profiling for a library called <STRONG>mylib</STRONG>,
  link your program by using the following command:

       <STRONG>%</STRONG> <STRONG>cc</STRONG> <STRONG>-non_shared</STRONG> <STRONG>-pg</STRONG> <STRONG>myprog</STRONG> <STRONG>-no_pg</STRONG> <STRONG>-lmylib</STRONG>

  You can use environment variables to change the default profiling behavior.
  The variables are <STRONG>PROFDIR</STRONG> and <STRONG>PROFFLAGS</STRONG>. The general form for setting these
  variables is:

    <STRONG><FONT SIZE="+3">&#183;</FONT></STRONG>  For C shell: <STRONG>setenv</STRONG> <VAR>varname</VAR> <STRONG>"</STRONG><VAR>value</VAR><STRONG>"</STRONG>

    <STRONG><FONT SIZE="+3">&#183;</FONT></STRONG>  For Bourne shell: <VAR>varname</VAR> <STRONG>=</STRONG> <STRONG>"</STRONG><VAR>value</VAR><STRONG>";</STRONG> <STRONG>export</STRONG> <VAR>varname</VAR>

    <STRONG><FONT SIZE="+3">&#183;</FONT></STRONG>  For Korn shell: <STRONG>export</STRONG> <VAR>varname</VAR> <STRONG>=</STRONG> <VAR>value</VAR>

  In the preceding example, <VAR>varname</VAR> can be one of the following:

  <STRONG>PROFDIR</STRONG>
      This environment variable causes PC-sampling data files to be generated
      with unique names in the directory you specify.

      You specify a directory path as the <VAR>value</VAR> and your <STRONG>prof</STRONG> results are
      placed in the file <VAR>path</VAR>/<VAR>pid.progname</VAR> where <VAR>path</VAR> is the pathname, <VAR>pid</VAR> is
      the process ID of the executing program, and <VAR>progname</VAR> is the program
      name.

  <STRONG>PROFFLAGS</STRONG>
      This environment variable can take any of the following values:

	<STRONG><FONT SIZE="+3">&#183;</FONT></STRONG>  <STRONG>-threads</STRONG> causes a separate data file to be generated for each
	   thread. The name of the data file takes the following form:

	   <VAR>pid.sid.prog</VAR>_<VAR>name</VAR>

	   The form of the filename resolves to <VAR>pid</VAR> as the process ID of the
	   program, <VAR>sid</VAR> as the sequence number of the thread and <VAR>prog</VAR>_<VAR>name</VAR> as
	   the name of the program being profiled.

	<STRONG><FONT SIZE="+3">&#183;</FONT></STRONG>  <STRONG>-sigdump</STRONG> <VAR>signal-name</VAR> automatically establishes <A HREF="../MAN3/2386____.HTM">monitor_signal(3)</A>
	   as the signal handler for the named signal, and it causes
	   <A HREF="../MAN3/2386____.HTM">monitor_signal(3)</A> to zero the profile after it is written to a
	   file. This allows a signal to be sent several times without the
	   successive profiles overlapping, if the file is renamed. The
	   asynchronous nature of a signal may cause small variations in the
	   profile. Unrecognized <VAR>signal-names</VAR> are ignored. The <STRONG>-threads</STRONG>
	   option is ignored if combined with <STRONG>-sigdump</STRONG>.

	<STRONG><FONT SIZE="+3">&#183;</FONT></STRONG>  <STRONG>-dirname</STRONG> <VAR>directory</VAR> specifies the directory path in which the
	   profiling data file or files are created.

	<STRONG><FONT SIZE="+3">&#183;</FONT></STRONG>  <STRONG>-[no]pids</STRONG> [disables] or enables the addition of the process-id
	   number to the name of the profiling data file or files.

  You can use the <STRONG>PROFDIR</STRONG> and <STRONG>PROFFLAGS</STRONG> environment variables together. For
  more information, see the <A HREF="../../ARH9VDTE/TITLE.HTM" TARGET="ProgGde"><VAR>Programmer's Guide</VAR></A>.

  PC-Sampling Profiles with hiprof

  The profile data is taken from the specified call-graph <VAR>profile</VAR>_<VAR>file</VAR>,
  created by a program that has been instrumented in the default manner for
  the <STRONG>hiprof</STRONG> command. The profile can cover all the libraries used by the
  threaded or non-threaded program, and it can be displayed as the time used
  by procedures, source lines, or instructions.

  To produce and display PC-sampling data, see <A HREF="../MAN1/0467____.HTM">hiprof(1)</A> for one-step
  profiling, or follow these steps:

   <STRONG>1.</STRONG>  Compile your program using the required <STRONG>-O</STRONG> and <STRONG>-g</STRONG> levels.

   <STRONG>2.</STRONG>  Use the <STRONG>hiprof</STRONG> command to instrument the executable and any shared
       libraries the program uses:

       <STRONG>hiprof</STRONG> <VAR>prog</VAR>_<VAR>name</VAR>

       For a multi-threaded program, specify the <STRONG>-pthread</STRONG> option, or specify
       the <STRONG>-threads</STRONG> option to profile each thread separately (but note that
       many megabytes of memory and disk space may be used as a result).  The
       instrumented program is named <VAR>prog</VAR>_<VAR>name</VAR><STRONG>.hiprof</STRONG> by default.

   <STRONG>3.</STRONG>  Run the instrumented program to produce the profile data file(s),
       named <VAR>prog</VAR>_<VAR>name</VAR><STRONG>.hiout</STRONG> by default.

   <STRONG>4.</STRONG>  Run <STRONG>gprof</STRONG> on the instrumented executable (not the original):
	    <STRONG>%</STRONG> <STRONG>gprof</STRONG> <STRONG>-all</STRONG> <STRONG>-b</STRONG> <STRONG>-scaled</STRONG> <VAR>prog</VAR>_<VAR>name</VAR><STRONG>.hiprof</STRONG> <VAR>prog</VAR>_<VAR>name</VAR><STRONG>.hiout</STRONG>

       The default <STRONG>-graph</STRONG> and <STRONG>-procedures</STRONG> profile displays are the same as
       for PC-Sampling with <STRONG>cc</STRONG> <STRONG>-pg</STRONG>, described previously.

       To display profiles of the CPU time used by the most expensive source
       lines, use the <STRONG>-heavy</STRONG> option:
	    <STRONG>%</STRONG> <STRONG>gprof</STRONG> <STRONG>-all</STRONG> <STRONG>-b</STRONG> <STRONG>-scaled</STRONG> <STRONG>-heavy</STRONG> <VAR>prog</VAR>_<VAR>name</VAR><STRONG>.hiprof</STRONG> <VAR>prog</VAR>_<VAR>name</VAR><STRONG>.hiout</STRONG>

       To display profiles of the lines or instructions in particular
       procedures, specify <STRONG>-lines</STRONG> or <STRONG>-asm</STRONG> and the procedures:
	    <STRONG>%</STRONG> <STRONG>gprof</STRONG> <STRONG>-all</STRONG> <STRONG>-lines</STRONG> <STRONG>-asm</STRONG> <STRONG>-f</STRONG> <STRONG>main</STRONG> <VAR>prog</VAR>_<VAR>name</VAR><STRONG>.hiprof</STRONG> <VAR>prog</VAR>_<VAR>name</VAR><STRONG>.hiout</STRONG>

  Event-Counting Profiles with hiprof

  The profile data is taken from the specified call-graph <VAR>profile</VAR>_<VAR>file</VAR>,
  created by programs that have been instrumented with the <STRONG>-cycles</STRONG> or <STRONG>-faults</STRONG>
  option of the <STRONG>hiprof</STRONG> command.

  To produce and display event-counting data, see <A HREF="../MAN1/0467____.HTM">hiprof(1)</A> for one step
  profiling, or follow these steps:

   <STRONG>1.</STRONG>  Compile your program using the required <STRONG>-O</STRONG> and <STRONG>-g</STRONG> levels. For multi-
       threaded programs you must use a different profiling technique.

   <STRONG>2.</STRONG>  Use the <STRONG>hiprof</STRONG> command to instrument the executable and any shared
       libraries the program uses:

       <STRONG>hiprof</STRONG> <STRONG>[-cycles|-faults]</STRONG> <VAR>prog</VAR>_<VAR>name</VAR>

       Specify the <STRONG>-cycles</STRONG> option to count the number of machine cycles used
       by each procedure. If instead you want the number of page faults
       suffered by each procedure, specify the <STRONG>-faults</STRONG> option. The
       instrumented program is named <VAR>prog</VAR>_<VAR>name</VAR>.<STRONG>hiprof</STRONG>, by default.

   <STRONG>3.</STRONG>  Run the instrumented program to produce the profile data file, named
       <VAR>prog</VAR>_<VAR>name</VAR>.<STRONG>hiout</STRONG>, by default:

       <VAR>prog</VAR>_<VAR>name</VAR><STRONG>.hiprof</STRONG> <STRONG>[</STRONG><VAR>arg</VAR><STRONG>...]</STRONG>

   <STRONG>4.</STRONG>  Run <STRONG>gprof</STRONG> on the original executable and one or more profile data
       files, specifying any required options other than <STRONG>-E</STRONG> and <STRONG>-F</STRONG>, which are
       not meaningful with <STRONG>hiprof</STRONG>'s event-counting call data:

       <STRONG>gprof</STRONG> <STRONG>[</STRONG><VAR>options</VAR><STRONG>]</STRONG> <VAR>program</VAR> <VAR>program</VAR><STRONG>*.hiout</STRONG>

  The <STRONG>gprof</STRONG> command produces a report with the following sections:

    <STRONG><FONT SIZE="+3">&#183;</FONT></STRONG>  A call-graph profile, showing the procedures that call each procedure
       and the procedures it calls, including the number of calls and
       instructions, seconds, or page-faults involved in them.	The costs of
       the calls printed in this report are individually measured, rather
       than being statistically estimated like in reports based on PC-
       sampling data.

    <STRONG><FONT SIZE="+3">&#183;</FONT></STRONG>  A flat profile showing the instructions, seconds, or page-faults
       associated with each procedure.

    <STRONG><FONT SIZE="+3">&#183;</FONT></STRONG>  An index of procedures sorted by name, including object, source file,
       and line number if <STRONG>-numbers</STRONG> is specified.

  The <STRONG>hiprof</STRONG> data files profile the executable and all the shared libraries
  used by a call-shared program. By default, <STRONG>gprof</STRONG> prints call-graph and flat
  profile entries only for the procedures in the executable, though the
  number and cost of calls to shared library procedures are printed in the
  call-graph. Specify the <STRONG>-incobj</STRONG> or <STRONG>-all</STRONG> options to see entries for
  procedures in some or all of the shared libraries.

<H3>NOTES</H3>
   <STRONG>1.</STRONG>  Be aware of possible quantization errors when using <STRONG>gprof</STRONG> with PC-
       sampling profile data files. The granularity of the sampling is shown,
       but remains statistical at best. The time for each execution of a
       function can be expressed by the total time for the function divided
       by the number of times the function is called; thus, the time
       propagated along the call graph arcs to parents of that function is
       directly proportional to the number of times that arc is traversed.

   <STRONG>2.</STRONG>  Parents that are not themselves profiled have the time of their
       profiled children propagated to them, but appear to be spontaneously
       invoked in the call graph listing; they do not have their time
       propagated further.

   <STRONG>3.</STRONG>  Similarly, signal catchers, even though profiled, appear to be
       spontaneous.  Any profiled children of signal catchers should have
       their times propagated properly, unless the signal catcher was invoked
       during the execution of the profiling routine, in which case
       propagation cannot occur.

   <STRONG>4.</STRONG>  The profiled program must call <STRONG>exit</STRONG> or return normally for the
       profiling information to be saved in the <STRONG>gmon.out</STRONG> file, unless
       <STRONG>-sigdump</STRONG> and <STRONG>kill</STRONG> are used to save the profile early.

   <STRONG>5.</STRONG>  A threaded program that is linked <STRONG>-non_shared</STRONG> will appear to spend a
       large proportion of its time in <STRONG>pthread_mutex_unlock</STRONG>,
       <STRONG>pthread_mutex_lock</STRONG>, <STRONG>pthread_getspecific</STRONG>, and other threads-related
       procedures that have no calls recorded, when using PC-sampling data.
       While the application code may be using these routines, much or all of
       the reported time is actually used by the profile data collection
       library's use of them, so it can usually be ignored.

<H3>ERRORS</H3>
  If a PC-sampling program makes more procedure calls than can be recorded,
  the error "Arc limit exceeded" will occur.  The program will continue to
  execute to completion, but some call-arc information will be lost. A
  possible work-around for this problem is to reduce the portion of the
  program that is profiled using the <STRONG>monstartup()</STRONG> routine. See <A HREF="../MAN3/2386____.HTM">monitor(3)</A> for
  more information.

<H3>FILES</H3>
  <STRONG>a.out</STRONG>
      Default object file

  <STRONG>gmon.out</STRONG>
      Default (PC-sampling) call graph and profile

  <STRONG>gmon.sum</STRONG>
      Default summarized dynamic call graph and profile

  <VAR>program</VAR><STRONG>[.</STRONG><VAR>pid</VAR><STRONG>][.</STRONG><VAR>thread</VAR><STRONG>].hiout</STRONG>
      Profiling data file produced by <STRONG>hiprof</STRONG>-generated program

<H3>SEE ALSO</H3>
  Introduction: <A HREF="../MAN1/0178____.HTM">prof_intro(1)</A>

  Commands:  <A HREF="../MAN1/0350____.HTM">prof(1)</A>, <A HREF="../MAN1/0467____.HTM">hiprof(1)</A>, <STRONG>dxprof(1)</STRONG>.  (<STRONG>dxprof(1)</STRONG> is available as an
  option.)

  Functions:  <A HREF="../MAN2/0059____.HTM">profil(2)</A>, <A HREF="../MAN3/2386____.HTM">monitor(3)</A>

  <A HREF="../../ARH9VDTE/TITLE.HTM" TARGET="ProgGde"><VAR>Programmer's Guide</VAR></A>

  <STRONG>gprof</STRONG>: A Call Graph Execution Profiler, by Graham, S.L., Kessler, P.B.,
  McKusick, M.K.

  <VAR>Proceedings</VAR> <VAR>of</VAR> <VAR>the</VAR> <VAR>SIGPLAN</VAR> '<VAR>82</VAR> <VAR>Symposium</VAR> <VAR>on</VAR> <VAR>Compiler</VAR> <VAR>Construction</VAR>, SIGPLAN
  Notices, Vol. 17, No. 6, pp. 120-126, June 1982.
</PRE>
<P>

<A NAME="page_bottom"></A>
<CENTER><TABLE CELLSPACING=0 CELLPADDING=4 BORDER=2>
<TR>
	<TD WIDTH="33%"><TABLE CELLSPACING=0 CELLPADDING=4 BORDER=0 WIDTH="100%">
	<TR ALIGN="Center">
		<TD><A HREF="INDEX.HTM"><IMG SRC="../TOC.GIF" WIDTH="56" HEIGHT="32" BORDER=0 ALT="Index"></A></TD>
		<TD NOWRAP>Index for<BR>Section 1</TD>
	</TR>
	</TABLE></TD>
	<TD WIDTH="33%"><TABLE CELLSPACING=0 CELLPADDING=4 BORDER=0 WIDTH="100%">
	<TR ALIGN="Center">
		<TD><A HREF="../INDEXES/INDEX_G.HTM"><IMG SRC="../INDEX.GIF" WIDTH="56" HEIGHT="32" BORDER=0 ALT="Index"></A></TD>
		<TD NOWRAP>Alphabetical<BR>listing for G</TD>
	</TR>
	</TABLE></TD>
	<TD WIDTH="33%"><TABLE CELLSPACING=0 CELLPADDING=4 BORDER=0 WIDTH="100%">
	<TR ALIGN="Center">
		<TD><A HREF="#page_top"><IMG SRC="../REW.GIF" WIDTH="56" HEIGHT="32" BORDER=0 ALT="Top of page"></A></TD>
		<TD NOWRAP>Top of<BR>page</TD>
	</TR>
	</TABLE></TD>
</TR>
</TABLE></CENTER>

<!--Metrics Tag -->
<script type="text/javascript" language="JavaScript" src="http://welcome.hp.com/cma/segment/ww/aquarius/metrics_Alpha.js"></script>

<!--End Tag -->
</BODY>
</HTML>
