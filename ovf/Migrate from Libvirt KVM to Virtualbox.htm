
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Migrate from Libvirt KVM to Virtualbox</title>
<meta name="author" content="VirtuallyHyper">
<meta name="viewport" content="width=device-width,initial-scale=1.0">
 
<!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok2v=1613a3a185/"},atok:"8c67e1788b31f98e08bcd501a04120a5",petok:"10e2ec9da96e16e905587eb2639db951b1378e77-1415764184-1800",zone:"virtuallyhyper.com",rocket:"0",apps:{"ga_key":{"ua":"UA-7265705-7","ga_bs":"2"}}}];!function(a,b){a=document.createElement("script"),b=document.getElementsByTagName("script")[0],a.async=!0,a.src="//ajax.cloudflare.com/cdn-cgi/nexp/dok2v=919620257c/cloudflare.min.js",b.parentNode.insertBefore(a,b)}()}}catch(e){};
//]]>
</script>
<link href="//netdna.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" rel="stylesheet">
 
<script type="text/javascript">
//<![CDATA[
  (function() {
    var shr = document.createElement('script');
    shr.setAttribute('data-cfasync', 'false');
    shr.src = '//dsms0mj1bbhn4.cloudfront.net/assets/pub/shareaholic.js';
    shr.type = 'text/javascript'; shr.async = 'true';
    shr.onload = shr.onreadystatechange = function() {
      var rs = this.readyState;
      if (rs && rs != 'complete' && rs != 'loaded') return;
      var site_id = 'a59cdffe14bc028831ad82e874afb210';
      try { Shareaholic.init(site_id); } catch (e) {}
    };
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(shr, s);
  })();
//]]>
</script>
 
<link href="/assets/themes/twitter-2.0/css/bootstrap.min.css" rel="stylesheet">
<style type="text/css" media="screen">body{padding-top:60px;}</style>
<link href="/assets/themes/twitter-2.0/css/bootstrap-responsive.min.css" rel="stylesheet">
<link href="/assets/themes/twitter-2.0/css/style.css?body=1" rel="stylesheet" type="text/css" media="all">
<link href="/assets/themes/twitter-2.0/css/syntax.css" rel="stylesheet" type="text/css">
 
<link rel="shortcut icon" href="/assets/themes/twitter-2.0/favicon.ico">
 
<script type="text/javascript">
/* <![CDATA[ */
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-7265705-7']);
_gaq.push(['_trackPageview']);

(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

(function(b){(function(a){"__CF"in b&&"DJS"in b.__CF?b.__CF.DJS.push(a):"addEventListener"in b?b.addEventListener("load",a,!1):b.attachEvent("onload",a)})(function(){"FB"in b&&"Event"in FB&&"subscribe"in FB.Event&&(FB.Event.subscribe("edge.create",function(a){_gaq.push(["_trackSocial","facebook","like",a])}),FB.Event.subscribe("edge.remove",function(a){_gaq.push(["_trackSocial","facebook","unlike",a])}),FB.Event.subscribe("message.send",function(a){_gaq.push(["_trackSocial","facebook","send",a])}));"twttr"in b&&"events"in twttr&&"bind"in twttr.events&&twttr.events.bind("tweet",function(a){if(a){var b;if(a.target&&a.target.nodeName=="IFRAME")a:{if(a=a.target.src){a=a.split("#")[0].match(/[^?=&]+=([^&]*)?/g);b=0;for(var c;c=a[b];++b)if(c.indexOf("url")===0){b=unescape(c.split("=")[1]);break a}}b=void 0}_gaq.push(["_trackSocial","twitter","tweet",b])}})})})(window);
/* ]]> */
</script>
</head>
<body>
<div class="navbar navbar-fixed-top">
<div class="navbar-inner">
<div class="container">
<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</a>
<a class="brand" href="/">VirtuallyHyper</a>
<div class="nav-collapse">
<ul class="nav navbar-nav">
<li><a href="/about.html">About</a></li>
<li><a href="/archive.html">Archive</a></li>
<li><a href="/categories.html">Categories</a></li>
<li><a href="/search.html">Search</a></li>
<li class="dropdown">
<a href="#" class="dropdown-toggle" data-toggle="dropdown">Certifications <b class="caret"></b></a>
<ul class="dropdown-menu">
<li><a href="/2012/08/vcap5-dcd/">VCAP_DCD</a></li>
<li><a href="/2012/09/vcap5-dca/">VCAP_DCA</a></li>
<li class="divider"></li>
<li><a href="/2012/12/rhcsa-and-rhce-study-guide/">RHCSA_RCHE</a></li>
</ul>
</li>
</ul>
</div> 
</div>
</div>
</div>
<div class="container-fluid">
<div class="row-fluid">
<div class="span8">
<div class="content">
<div class="page-header">
<h1>Migrate from Libvirt KVM to Virtualbox</h1>
</div>
<i class="fa fa-calendar"></i> 15 June 2013 <i class="fa fa-user"></i> <a href="http://virtuallyhyper.com">Karim Elatov</a> <div style="float: right;"><i class="fa fa-comments"></i> <a href="/2013/06/migrate-from-libvirt-kvm-to-virtualbox/#disqus_thread"></a></div>
<div class="tag_box">
<i class="fa fa-tags"></i>
<a href="/tags.html#KVM-ref">KVM <span>5</span></a>
<a href="/tags.html#libvirt-ref">libvirt <span>4</span></a>
<a href="/tags.html#xml-ref">xml <span>2</span></a>
</div>
<hr>
<p>I was recently trying to migrate some VM from our KVM server to my laptop to run in my VirtualBox install locally. As I was going through the process I realized it’s not a very easy process, so I decided to jot down my process. It’s probably not perfect, but it worked for me.</p>
<h3 id="locate-your-kvm-vm-managed-by-libvirt">Locate Your KVM VM Managed by <em>libvirt</em></h3>
<p>We can use <strong>virsh</strong> for this. First let’s list all the VMs that belong to me:</p>
<pre><code>[elatov@klaptop ~]$ virsh -c qemu+ssh://virtuser@kvm01/system list --all| grep kelatov
 5     kelatov_win7_client2           running
 -     kelatov-child-domain-client    shut off
 -     kelatov-haproxy                shut off
 -     kelatov-win2k8-DC2-Repl        shut off
 -     kelatov-Win2k8-IIS2            shut off
 -     kelatov-Win2k8_DC_Repl         shut off
 -     kelatov_Win2k8-Child_DC        shut off
 -     kelatov_Win2k8-DC2             shut off
 -     kelatov_Win2k8_DC              shut off
 -     kelatov_win7_client1           shut off
</code></pre>
<p>I have a lot of them, first let’s move the <em>kelatov_Win2k8-DC2</em> VM.</p>
<h3 id="locate-the-disk-image-configured-for-the-vm-in-libvirt-kvm">Locate the Disk Image Configured for the VM in <em>libvirt</em> KVM</h3>
<p><strong>virsh</strong> is your friend for that as well:</p>
<pre><code>[elatov@klaptop ~]$ virsh -c qemu+ssh://virtuser@kvm01/system domblklist kelatov_Win2k8-DC2
Target     Source
------------------------------------------------
hda        /images/kelatov_win2k8r2.img
hdc        -
</code></pre>
<p>So our Disk Image file is under <strong>/images/kelatov_win2k8r2.img</strong>.</p>
<h3 id="copy-over-the-disk-image-file-to-the-local-machine">Copy Over the Disk Image File to the Local Machine</h3>
<p>Now that we know the location of the disk file, let’s copy it over. First let’s create a folder and then let’s <strong>rsync</strong> the file over:</p>
<pre><code>[elatov@klaptop ~]$ mkdir vm1
[elatov@klaptop ~]$ rsync -avzP virtuser@kvm01:/images/kelatov_win2k8r2.img vm1/.
receiving incremental file list
kelatov_win2k8r2.img
 21474836480 100%   17.25MB/s    0:19:47 (xfer#1, to-check=0/1)

sent 30 bytes  received 6353239881 bytes  5350096.77 bytes/sec
total size is 21474836480  speedup is 3.38
</code></pre>
<h3 id="generate-a-libvirt-domain-xml-format-configuration-of-the-kvm-vm">Generate a <em>libvirt</em> Domain XML format Configuration of the KVM VM</h3>
<p><strong>libvirt</strong> uses a special XML format file to keep track of all the configurations for a VM. All the specifics of the XML file are <a href="http://libvirt.org/formatdomain.html">here</a>. Using <strong>virsh</strong>, generating the file is a breeze:</p>
<pre><code>[elatov@klaptop ~]$ cd vm1/
[elatov@klaptop vm1]$ virsh -c qemu+ssh://virtuser@kvm01/system dumpxml kelatov_Win2k8-DC2 &gt; kelatov_Win2k8-DC2.xml
</code></pre>
<p>The file is pretty long, but just checking the top of the file, we should see something like this:</p>
<pre><code>[elatov@klaptop vm1]$ head kelatov_Win2k8-DC2.xml
&lt;domain type='kvm'&gt;
  &lt;name&gt;kelatov_Win2k8-DC2&lt;/name&gt;
  &lt;uuid&gt;b5188795-2be0-b229-7538-0fe7f2e930a3&lt;/uuid&gt;
  &lt;memory&gt;1048576&lt;/memory&gt;
  &lt;currentmemory&gt;1048576&lt;/currentmemory&gt;
  &lt;vcpu&gt;1&lt;/vcpu&gt;
  &lt;os&gt;
    &lt;type arch='x86_64' machine='rhel6.2.0'&gt;hvm&lt;/type&gt;
    &lt;boot dev='hd'&gt;&lt;/boot&gt;
  &lt;/os&gt;
</code></pre>
<p><em>libvirt</em> keeps the configuration XML file under <strong>/etc/libvirt/qemu</strong> as well:</p>
<pre><code>[virtuser@kvm01 ~]$ head /etc/libvirt/qemu/kelatov_Win2k8-DC2.xml
&lt;!--
WARNING: THIS IS AN AUTO-GENERATED FILE. CHANGES TO IT ARE LIKELY TO BE
OVERWRITTEN AND LOST. Changes to this xml configuration should be made using:
  virsh edit kelatov_Win2k8-DC2
or other application using the libvirt API.
--&gt;

&lt;/domain&gt;&lt;domain type='kvm'&gt;
  &lt;name&gt;kelatov_Win2k8-DC2&lt;/name&gt;
  &lt;uuid&gt;b5188795-2be0-b229-7538-0fe7f2e930a3&lt;/uuid&gt;
</code></pre>
<p>So if you really wanted to, you could just <strong>rsync</strong> that file.</p>
<h3 id="convert-raw-format-disk-image-img-to-vmdk">Convert RAW Format Disk Image (.img) to VMDK</h3>
<p>Now that we have all the files:</p>
<pre><code>[elatov@klaptop vm1]$ ls -1
kelatov_Win2k8-DC2.xml
kelatov_win2k8r2.img
</code></pre>
<p>Let’s create an OVF file, so we can import it into VirtualBox. To do this, first we will need to convert our disk image to VMDK format. You can use <strong>qemu-img</strong> to find out the exact format of the disk image file:</p>
<pre><code>[elatov@klaptop vm1]$ qemu-img info kelatov_win2k8r2.img
image: kelatov_win2k8r2.img
file format: raw
virtual size: 20G (21474836480 bytes)
disk size: 20G
</code></pre>
<p>So we are currently in <strong>RAW</strong> format. Here is the command we can use to convert it to VMDK format:</p>
<pre><code>[elatov@klaptop vm1]$ qemu-img convert -O vmdk kelatov_win2k8r2.img kelatov_win2k8r2.vmdk -p
    (100.00/100%)
</code></pre>
<h3 id="convert-domain-xml-format-configuration-file-to-libvirt-image-xml-configuration-file-virt-image">Convert Domain XML Format Configuration File to libvirt “image” XML Configuration File (virt-image)</h3>
<p>For some reason, the <strong>virt-image</strong> and <strong>virt-convert</strong> commands can only convert from the image XML Descriptor file. From the <strong>virt-image</strong> man page:</p>
<pre><code>virt-image is a command line tool for creating virtual machines from an
       XML image descriptor "IMAGE.XML" (virt-image(5)). Most attributes of
       the virtual machine are taken from the XML descriptor (e.g., where the
       files to back the virtual machine's disks are and how to map them into
       the guest), though certain information must be added on the command
       line, such as the name of the guest.

       The XML descriptor defines most attributes of the guest, making it
       possible to bundle and distribute it together with the files backing
       the guest's disks.
</code></pre>
<p>And here is the section from <strong>virt-convert</strong>:</p>
<pre><code> Conversion Options
       -i format
         Input format. Currently, "vmx", "virt-image", and "ovf" are
         supported.
</code></pre>
<p>There have been other people wondering how to convert libvirt domain XML file into other formats like the XML image format (virt-image), VMware VMX, or even OVF. Here are some forums that talk about it:</p>
<ul>
<li><a href="http://www.redhat.com/archives/virt-tools-list/2010-April/msg00023.html">virt-convert from libvirt to vmware</a></li>
<li><a href="http://www.redhat.com/archives/libvir-list/2012-June/msg01012.html">[libvirt] Intend to add OVA installation API</a></li>
<li><a href="https://www.redhat.com/archives/libvirt-users/2011-September/msg00042.html">[libvirt-users] using virsh (or something) to convert from KVM domain XML to vmx…</a></li>
<li><a href="http://lists.fedoraproject.org/pipermail/virt/2010-August/002220.html">[fedora-virt] exporting a vm image</a></li>
</ul>
<p>but none of the above have been resolved yet.</p>
<p>There is a script that goes from <strong>vmx</strong> to <em>libvirt</em> domain XML format: <a href="http://bazaar.launchpad.net/~ubuntu-virt/virt-goodies/trunk/files">Virtualization Preview Repository</a>”. After you install the new <strong>libvirt-client</strong> tools you can then run commands against an ESX host:</p>
<pre><code>[elatov@klaptop ~]$ virsh -c esx://vmware01/?no_verify=1 dumpxml kelatov-2
Enter username for vmware01 [root]:
Enter root's password for vmware01:
&lt;/domain&gt;&lt;domain type='vmware'&gt;
  &lt;name&gt;kelatov-2&lt;/name&gt;
  &lt;uuid&gt;564d3355-1ee8-ce81-00fa-ef6c1a767850&lt;/uuid&gt;
  &lt;memory unit='KiB'&gt;4194304&lt;/memory&gt;
  &lt;currentmemory unit='KiB'&gt;4194304&lt;/currentmemory&gt;
  &lt;vcpu placement='static'&gt;2&lt;/vcpu&gt;
  &lt;os&gt;
    &lt;type arch='x86_64'&gt;hvm&lt;/type&gt;
  &lt;/os&gt;
  &lt;clock offset='utc'&gt;&lt;/clock&gt;
  &lt;on_poweroff&gt;destroy&lt;/on_poweroff&gt;
  &lt;on_reboot&gt;restart&lt;/on_reboot&gt;
  &lt;on_crash&gt;destroy&lt;/on_crash&gt;
  &lt;devices&gt;
    &lt;disk type='file' device='disk'&gt;
      &lt;source file='[images] kelatov-2/kelatov-2.vmdk'/&gt;
      &lt;target dev='sda' bus='scsi'&gt;&lt;/target&gt;
      &lt;address type='drive' controller='0' bus='0' target='0' unit='0'&gt;&lt;/address&gt;
    &lt;/disk&gt;
    &lt;disk type='block' device='cdrom'&gt;
      &lt;source dev='cdrom1'/&gt;
      &lt;target dev='hda' bus='ide'&gt;&lt;/target&gt;
      &lt;address type='drive' controller='0' bus='0' target='0' unit='0'&gt;&lt;/address&gt;
    &lt;/disk&gt;
    &lt;controller type='scsi' index='0' model='lsilogic'&gt;&lt;/controller&gt;
    &lt;controller type='ide' index='0'&gt;&lt;/controller&gt;
    &lt;interface type='bridge'&gt;
      &lt;mac address='00:0c:29:76:78:50'&gt;&lt;/mac&gt;
      &lt;source bridge='net1'/&gt;
      &lt;model type='e1000'&gt;&lt;/model&gt;
    &lt;/interface&gt;
    &lt;video&gt;
      &lt;model type='vmvga' vram='4096'&gt;&lt;/model&gt;
    &lt;/video&gt;
  &lt;/devices&gt;
&lt;/domain&gt;
</code></pre>
<p>So if I had started out with ESX and was trying to go to KVM that would have been pretty easy (but at least now I can use <strong>virsh</strong> to query an ESX server). Since no solution has been found, I decided to write my own python script that converts from libvirt Domain XML format to virt-image (XML Image Descriptor) XML format. The format of the XML image descriptor is seen <a href="http://manpages.ubuntu.com/manpages/hardy/man5/virt-image.5.html">here</a>. Here is an example of the format:</p>
<pre><code> &lt; ?xml version="1.0" encoding="UTF-8"?&gt;
           &lt;image&gt;
             &lt;name&gt;sysresccd&lt;/name&gt;
             &lt;domain&gt;
               &lt;boot type="hvm"&gt;
                 &lt;guest&gt;
                   &lt;arch&gt;i686&lt;/arch&gt;
                 &lt;/guest&gt;
                 &lt;os&gt;
                   &lt;loader dev="cdrom"&gt;&lt;/loader&gt;
                 &lt;/os&gt;
                 &lt;drive disk="root.raw" target="hda"&gt;&lt;/drive&gt;
                 &lt;drive disk="sysresc"&gt;&lt;/drive&gt;
               &lt;/boot&gt;
               &lt;devices&gt;
                 &lt;vcpu&gt;1&lt;/vcpu&gt;
                 &lt;memory&gt;262144&lt;/memory&gt;
                 &lt;interface&gt;&lt;/interface&gt;
                 &lt;graphics&gt;&lt;/graphics&gt;
               &lt;/devices&gt;
             &lt;/domain&gt;
             &lt;storage&gt;
               &lt;disk file="root.raw" use="scratch" size="100" format="raw"&gt;&lt;/disk&gt;
               &lt;disk id="sysresc" file="isos/systemrescuecd.iso"
                     use="system" format="iso"&gt;&lt;/disk&gt;
             &lt;/storage&gt;
           &lt;/image&gt;
</code></pre>
<p>Here is what I came up with:</p>
<pre><code>[elatov@klaptop vm1]$ cat dom2img.py
#!/usr/bin/env python
from xml.dom import minidom
from xml.dom.minidom import Document
import sys

# Read in first arguement
input_file = sys.argv[1]

# parse our XML file
xml = minidom.parse(input_file)

# Get the DomainName or the VM Name
domainName = xml.getElementsByTagName('name')
domain_name = domainName[0].childNodes[0].nodeValue

# Get the hypervisor Type
domainHType = xml.getElementsByTagName('type')
h_type = domainHType[0].childNodes[0].nodeValue

# Get the Arch and OS
domainOSInfo = xml.getElementsByTagName('type')
for i in domainOSInfo:
    domain_arch = i.getAttribute('arch')
    domain_os = i.getAttribute('machine')

# Get Boot Device Type
domainBootDevType = xml.getElementsByTagName('boot')
for i in domainBootDevType:
    boot_dev_type = i.getAttribute('dev')

# Get disk Device location
for node in xml.getElementsByTagName("disk"):
    if node.getAttribute("device") == "disk":
        source = node.getElementsByTagName('source')
        for s in source:
            disk_loc = s.getAttribute('file')

# Get Boot Device
mapping = {}
for node in xml.getElementsByTagName("disk"):
    dev = node.getAttribute("device")
    target = node.getElementsByTagName('target')
    for t in target:
        mapping[dev] = t.getAttribute('dev')

if boot_dev_type == 'hd':
    boot_dev = mapping['disk']
elif boot_dev_type == 'cdrom':
    boot_dev = mapping['cdrom']

# Get amount of CPUS
domainVCPUs = xml.getElementsByTagName('vcpu')
vcpu_count = domainVCPUs[0].childNodes[0].nodeValue

# Get amount of RAM
domainMemory = xml.getElementsByTagName('memory')
memory = domainMemory[0].childNodes[0].nodeValue

# Create an empty XML Document
doc = Document()

# Create the "image" element
image = doc.createElement("image")
doc.appendChild(image)

# Create the Name Element
name_element = doc.createElement("name")
image.appendChild(name_element)
name_text = doc.createTextNode(domain_name)
name_element.appendChild(name_text)

# Create the Label Element
label_element = doc.createElement("label")
image.appendChild(label_element)
label_text = doc.createTextNode(domain_name)
label_element.appendChild(label_text)

# Create the Description Element
desc_element = doc.createElement("description")
image.appendChild(desc_element)
desc_text = doc.createTextNode(domain_os)
desc_element.appendChild(desc_text)

# Create the Domain Element
domain_element = doc.createElement("domain")
image.appendChild(domain_element)

# Create boot element
boot_element = doc.createElement("boot")
boot_element.setAttribute("type",h_type )
domain_element.appendChild(boot_element)

# Create guest Element
guest_element = doc.createElement("guest")
boot_element.appendChild(guest_element)

# Create the arch attribute
arch_element = doc.createElement("arch")
guest_element.appendChild(arch_element)
arch_text = doc.createTextNode(domain_arch)
arch_element.appendChild(arch_text)

# Create OS Element
os_element = doc.createElement("os")
boot_element.appendChild(os_element)

# Create the loader element and set the dev attribute
loader_element = doc.createElement("loader")
loader_element.setAttribute("dev",boot_dev_type)
os_element.appendChild(loader_element)

# Create drive element and set it's attributes
drive_element = doc.createElement("drive")
drive_element.setAttribute("disk", disk_loc)
drive_element.setAttribute("target", boot_dev)
boot_element.appendChild(drive_element)

# Create device Element
devices_element = doc.createElement("devices")
domain_element.appendChild(devices_element)

# Create VCPU text
vcpu_element = doc.createElement("vcpu")
devices_element.appendChild(vcpu_element)
vcpu_text = doc.createTextNode (vcpu_count)
vcpu_element.appendChild(vcpu_text)

# Create Memory text
memory_element = doc.createElement("memory")
devices_element.appendChild(memory_element)
memory_text = doc.createTextNode(memory)
memory_element.appendChild(memory_text)

# Create interface element
interface_element = doc.createElement("interface")
devices_element.appendChild(interface_element)

# Create graphics element
graphics_element = doc.createElement("graphics")
devices_element.appendChild(graphics_element)

# Create storage element
storage_element = doc.createElement("storage")
image.appendChild(storage_element)

# create disk element and set it's attributes
disk_element = doc.createElement("disk")
disk_element.setAttribute("file",disk_loc)
disk_element.setAttribute("format","vmdk")
disk_element.setAttribute("use","system")
storage_element.appendChild(disk_element)

f = open(input_file + '_converted', 'w')
f.write (doc.toprettyxml(indent=" ",encoding="utf-8"))
f.close()
</code></pre>
<p>It basically takes in one argument, the domain XML file to be converted, and produces a new file with “converted” appended to the original filename. Here is what I did to run the conversion:</p>
<pre><code>[elatov@klaptop vm1]$ ./dom2img.py kelatov_Win2k8-DC2.xml
</code></pre>
<p>Now to check out both files, here is the original:</p>
<pre><code>[elatov@klaptop vm1]$ head kelatov_Win2k8-DC2.xml
&lt;domain type='kvm'&gt;
  &lt;name&gt;kelatov_Win2k8-DC2&lt;/name&gt;
  &lt;uuid&gt;b5188795-2be0-b229-7538-0fe7f2e930a3&lt;/uuid&gt;
  &lt;memory&gt;1048576&lt;/memory&gt;
  &lt;currentmemory&gt;1048576&lt;/currentmemory&gt;
  &lt;vcpu&gt;1&lt;/vcpu&gt;
  &lt;os&gt;
    &lt;type arch='x86_64' machine='rhel6.2.0'&gt;hvm&lt;/type&gt;
    &lt;boot dev='hd'&gt;&lt;/boot&gt;
  &lt;/os&gt;
</code></pre>
<p>And here is the converted one:</p>
<pre><code>[elatov@klaptop vm1]$ head kelatov_Win2k8-DC2.xml_converted
&lt; ?xml version="1.0" encoding="utf-8"?&gt;
&lt;image&gt;
 &lt;name&gt;kelatov_Win2k8-DC2&lt;/name&gt;
 &lt;label&gt;kelatov_Win2k8-DC2&lt;/label&gt;
 &lt;description&gt;rhel6.2.0&lt;/description&gt;
 &lt;domain&gt;
  &lt;boot type="hvm"&gt;
   &lt;guest&gt;
    &lt;arch&gt;x86_64&lt;/arch&gt;
   &lt;/guest&gt;
   &lt;os&gt;
</code></pre>
<h3 id="convert-xml-image-descriptor-to-vmx">Convert XML Image Descriptor to VMX</h3>
<p>Luckily <strong>virt-convert</strong> can handle this:</p>
<pre><code>[elatov@klaptop vm1]$ virt-convert -i virt-image kelatov_Win2k8-DC2.xml_converted -o vmx kelatov_Win2k8-DC2.vmx
Generating output in 'vmx' format to /home/elatov/vm1/
Converting disk '/images/kelatov_win2k8r2.img' to type vmdk...
Done.
</code></pre>
<p>Now checking out the VMX file:</p>
<pre><code>[elatov@klaptop vm1]$ head -20 kelatov_Win2k8-DC2.vmx

#!/usr/bin/vmplayer

# Generated by virt-convert
# http://virt-manager.org/

# This is a Workstation 5 or 5.5 config file and can be used with Player
config.version = "8"
virtualHW.version = "4"
guestOS = "other"
displayName = "kelatov_Win2k8-DC2"
annotation = "rhel6.2.0"
guestinfo.vmware.product.long = "kelatov_Win2k8-DC2"
guestinfo.vmware.product.url = "http://virt-manager.org/"
guestinfo.vmware.product.class = "virtual machine"
numvcpus = "1"
memsize = "1024"
MemAllowAutoScaleDown = "FALSE"
MemTrimRate = "-1"
uuid.action = "create"
</code></pre>
<p>That doesn’t look too bad.</p>
<h3 id="create-ovf-from-vmx-and-vmdk">Create OVF from VMX and VMDK</h3>
<p>Let’s first fix the disk location, right now it’s still pointing to the <strong>.img</strong> file:</p>
<pre><code>[elatov@klaptop vm1]$ grep img kelatov_Win2k8-DC2.vmx
ide0:0.fileName = "/images/kelatov_win2k8r2.img"
</code></pre>
<p>Since the VMDK is located in the same directory:</p>
<pre><code>[elatov@klaptop vm1]$ ls -1
dom2img.py
kelatov_Win2k8-DC2.vmx
kelatov_Win2k8-DC2.xml
kelatov_Win2k8-DC2.xml_converted
kelatov_win2k8r2.img
kelatov_win2k8r2.vmdk
</code></pre>
<p>Let’s edit the VMX file:</p>
<pre><code>[elatov@klaptop vm1]$ vi kelatov_Win2k8-DC2.vmx
</code></pre>
<p>and fix the location to be relative to the current directory:</p>
<pre><code>[elatov@klaptop vm1]$ grep vmdk kelatov_Win2k8-DC2.vmx
ide0:0.fileName = "kelatov_win2k8r2.vmdk"
</code></pre>
<p>That looks good, now let’s create the OVF. More information regarding installing and using <strong>ovftool</strong> is seen at “<a href="/2013/04/migrating-a-vm-from-vmware-workstation-to-oracle-virtualbox/">Migrating a VM from VMware Workstation to Oracle VirtualBox</a>”. Here is the command I ran to create our OVF:</p>
<pre><code>[elatov@klaptop vm1]$ ovftool kelatov_Win2k8-DC2.vmx kelatov_Win2k8-DC2.ovf
Opening VMX source: kelatov_Win2k8-DC2.vmx
Opening OVF target: kelatov_Win2k8-DC2.ovf
Writing OVF package: kelatov_Win2k8-DC2.ovf
Transfer Completed
Completed successfully
</code></pre>
<p>After it was done, I had the following files:</p>
<pre><code>[elatov@klaptop vm1]$ ls -rt1
kelatov_win2k8r2.img
kelatov_Win2k8-DC2.xml
kelatov_win2k8r2.vmdk
kelatov_Win2k8-DC2.xml_converted
dom2img.py
kelatov_Win2k8-DC2.vmx
kelatov_Win2k8-DC2-disk1.vmdk
kelatov_Win2k8-DC2.ovf
kelatov_Win2k8-DC2.mf
</code></pre>
<p>The bottom 3 files were created by the OVF creation process.</p>
<h3 id="import-ovf-into-virtualbox">Import OVF into VirtualBox</h3>
<p>Doing a VirtualBox dry-run import, I saw the following:</p>
<pre><code>[elatov@klaptop vm1]$ VBoxManage import -n kelatov_Win2k8-DC2.ovf
0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%
Interpreting /home/elatov/vm1/kelatov_Win2k8-DC2.ovf...
OK.
Disks:  vmdisk1 20  17550934016 http://www.vmware.com/interfaces/specifications/vmdk.html#streamOptimized   kelatov_Win2k8-DC2-disk1.vmdk   6997323776  -1
Virtual system 0:
 0: Suggested OS type: "Other"
    (change with "--vsys 0 --ostype &lt;type&gt;"; use "list ostypes" to list all possible values)
 1: Suggested VM name "vm"
    (change with "--vsys 0 --vmname &lt;name&gt;")
 2: Description "rhel6.2.0"
    (change with "--vsys 0 --description &lt;desc&gt;")
 3: Number of CPUs: 1
    (change with "--vsys 0 --cpus &lt;n&gt;")
 4: Guest memory: 1024 MB
    (change with "--vsys 0 --memory &lt;mb&gt;")
 5: Network adapter: orig nat, config 2, extra type=nat
 6: IDE controller, type PIIX4
    (disable with "--vsys 0 --unit 6 --ignore")
 7: Hard disk image: source image=kelatov_Win2k8-DC2-disk1.vmdk, target path=/home/elatov/.virt/vm/kelatov_Win2k8-DC2-disk1.vmdk, controller=6;channel=0
    (change target path with "--vsys 0 --unit 7 --disk path";
    disable with "--vsys 0 --unit 7 --ignore")
</code></pre>
<p>I liked the outcome: memory, CPU, and hard disk information was correct. I decided to run the import and at the same time I changed the OS type and the name. Here is how the whole process looked like:</p>
<pre><code>[elatov@klaptop vm1]$ VBoxManage import kelatov_Win2k8-DC2.ovf --vsys 0 --ostype Windows2008_64 --vsys 0 --vmname kelatov_win2k8_DC
0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%
Interpreting /home/elatov/vm1/kelatov_Win2k8-DC2.ovf...
OK.
Disks:  vmdisk1 20  17550934016 http://www.vmware.com/interfaces/specifications/vmdk.html#streamOptimized   kelatov_Win2k8-DC2-disk1.vmdk   6997323776  -1
Virtual system 0:
 0: OS type specified with --ostype: "Windows2008_64"
 1: VM name specified with --vmname: "kelatov_win2k8_DC"
 2: Description "rhel6.2.0"
    (change with "--vsys 0 --description &lt;desc&gt;")
 3: Number of CPUs: 1
    (change with "--vsys 0 --cpus &lt;n&gt;")
 4: Guest memory: 1024 MB
    (change with "--vsys 0 --memory &lt;mb&gt;")
 5: Network adapter: orig nat, config 2, extra type=nat
 6: IDE controller, type PIIX4
    (disable with "--vsys 0 --unit 6 --ignore")
 7: Hard disk image: source image=kelatov_Win2k8-DC2-disk1.vmdk, target path=/home/elatov/.virt/vm/kelatov_Win2k8-DC2-disk1.vmdk, controller=6;channel=0
    (change target path with "--vsys 0 --unit 7 --disk path";
    disable with "--vsys 0 --unit 7 --ignore")
0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%
Successfully imported the appliance.
</code></pre>
<p>I then launched VirtualBox and powered on the VM, it booted without any issues:</p>
<p><img src="http://assets.virtuallyhyper.com/2013-05-successful_boot_after_migration.png" alt="successful boot after migration Migrate from Libvirt KVM to Virtualbox"/></p>
<root>
</root>
<div class='shareaholic-canvas' data-app='share_buttons' data-app-id='6778737' style="float: left"></div>
<div class="pagination" style="float: right">
<ul>
<li class="prev"><a href="/2013/06/install-splunk-and-send-logs-to-splunk-with-rsyslog-over-tcp-with-ssl/" title="Install Splunk and Send Logs to Splunk with Rsyslog over TCP with SSL">&larr; Previous</a></li>
<li><a href="/archive.html">Archive</a></li>
<li class="next"><a href="/2013/06/monitor-disk-io-stats-with-zabbix/" title="Monitor Disk IO Stats with Zabbix">Next &rarr;</a></li>
</ul>
</div>
<hr>
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
 
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:90px" data-ad-client="ca-pub-7439655074445804" data-ad-slot="4448070391"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
<div id="disqus_thread"></div>
<script type="text/javascript">
    
    var disqus_shortname = 'virtuallyhyper'; // required: replace example with your forum shortname
    
    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>
</div>
</div>
<div class="span4">
<div class="sidebar">
<div class="social sidebar-item">
<a href="https://twitter.com/virtuallyhyper" class="twitter-follow-button" data-show-count="false">Follow @virtuallyhyper</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</div>
<div class="sidebar-item">
<h2>Want to support us?</h2>
<a href="http://bit.ly/donate-to-virtuallyhyper" target="_blank">
<img src="https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif"/>
</a>
<a href="http://flattr.com/thing/1101166/VirtuallyHyper" target="_blank">
<img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0"/></a>
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js"></script>
<script type="text/javascript" src="https://blockchain.info//Resources/wallet/pay-now-button.js"></script>
<div style="font-size:8px;margin:0 auto;width:100%" class="blockchain-btn" data-address="1LbaicuGY3RsusHonGmwhXWaUw2yYnj2k3" data-shared="false">
<div class="blockchain stage-begin">
<img src="http://i.imgur.com/zTI9f5u.png"/>
</div>
<div class="blockchain stage-loading" style="text-align:center">
<img src="https://blockchain.info//Resources/loading-large.gif"/>
</div>
<div class="blockchain stage-ready">
<p align="center">Our Bitcoin Address: <b><br><small>[[address]]</small></b></p>
<p align="center" class="qr-code"></p>
</div>
<div class="blockchain stage-paid">
Donation of <b>[[value]] BTC</b> Received. Thank You.
</div>
<div class="blockchain stage-error">
<font color="red">[[error]]</font>
</div>
</div>
<script type='text/javascript'>
              var amzn_wdgt={widget:'MyFavorites'};
              amzn_wdgt.tag='virtuallyhyper-20';
              amzn_wdgt.columns='1';
              amzn_wdgt.rows='3';
              amzn_wdgt.title='Henri-Cartier-Bresson: Photographer Extraordinaire';
              amzn_wdgt.width='250';
              amzn_wdgt.ASIN='0893817449,0500410607,050054199X,0500286426,0893818755,050054333X,0500543178,0945506562';
              amzn_wdgt.showImage='True';
              amzn_wdgt.showPrice='True';
              amzn_wdgt.showRating='True';
              amzn_wdgt.design='2';
              amzn_wdgt.colorTheme='Orange';
              amzn_wdgt.headerTextColor='#FFFFFF';
              amzn_wdgt.marketPlace='US';
            </script>
<script type='text/javascript' src='http://wms-na.amazon-adsystem.com/20070822/US//js/AmazonWidgets.js'>
            </script>
</div> 
</div>
</div> 
</div> 
<footer>
<p>&copy;VirtuallyHyper 2014. Thoughts are our own and may not neccessarily represent the companies we work for.
</p>
</footer>
</div> 
 
<script type="text/javascript">
/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
var disqus_shortname = 'virtuallyhyper'; // required: replace example with your forum shortname

/* * * DON'T EDIT BELOW THIS LINE * * */
(function () {
var s = document.createElement('script'); s.async = true;
s.type = 'text/javascript';
s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
(document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
}());
</script>
 
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
<script>window.jQuery || document.write('<script src="/assets/themes/twitter-2.0/js/jquery.min.js"><\/script>')</script>
 
<script src="/assets/themes/twitter-2.0/js/bootstrap.min.js"></script>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-7265705-7', 'virtuallyhyper.com');
  ga('send', 'pageview');

</script>
</body>
</html>
